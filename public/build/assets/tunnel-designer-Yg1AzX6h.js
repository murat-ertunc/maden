import{G as d,D as c,c as T,d as k,e as u,f as w,P as f,S as o,N as g,B as n,g as a,a as h,L as m,b as y,h as D}from"./go-CIFq3fyT.js";class S{constructor(e,t={}){this.containerElementId=e,this.diagram=null,this.isDrawing=!1,this.currentTunnel=null,this.drawingMode="tunnel",this.config={gridSize:.5,defaultTunnelWidth:3,defaultTunnelHeight:3,defaultCrossSectionType:"circle",showMeasurements:!0,showGrid:!0,snapToGrid:!0,...t},this.tunnelData={segments:new Map,stations:new Map,branches:new Map,measurements:new Map},this.onTunnelCreated=null,this.onTunnelModified=null,this.onStationAdded=null,this.init()}init(){console.log("🚇 Tunnel Designer başlatılıyor..."),this.setupDiagram(),this.setupTemplates(),this.setupTools(),this.setupEventHandlers(),console.log("✅ Tunnel Designer hazır!")}setupDiagram(){const e=d.make;this.diagram=e(c,this.containerElementId,{"undoManager.isEnabled":!0,"grid.visible":this.config.showGrid,"grid.gridCellSize":new T(this.config.gridSize*20,this.config.gridSize*20),allowDrop:!0,allowClipboard:!1,"toolManager.mouseWheelBehavior":k.WheelZoom,initialContentAlignment:u.Center,initialAutoScale:c.Uniform,layout:e(w),"animationManager.isEnabled":!1,SelectionMoved:this.onSelectionMoved.bind(this),Modified:this.onDiagramModified.bind(this)}),this.config.showGrid&&(this.diagram.grid=e(f,"Grid",e(o,"LineH",{stroke:"lightgray",strokeWidth:.5}),e(o,"LineV",{stroke:"lightgray",strokeWidth:.5}),e(o,"LineH",{stroke:"gray",strokeWidth:1,interval:5}),e(o,"LineV",{stroke:"gray",strokeWidth:1,interval:5})))}setupTemplates(){this.setupTunnelSegmentTemplate(),this.setupStationTemplate(),this.setupMeasurementTemplate(),this.setupLinkTemplate()}setupTunnelSegmentTemplate(){const e=d.make;this.diagram.nodeTemplateMap.add("tunnel_segment",e(g,"Spot",{locationSpot:u.Center,selectionAdorned:!0,resizable:!0,rotatable:!0,dragComputation:this.snapToGrid.bind(this),mouseDrop:this.onNodeDrop.bind(this)},new n("location","position",a.parse).makeTwoWay(a.stringify),new n("angle","rotation").makeTwoWay(),e(o,{name:"TUNNEL_SHAPE",width:60,height:20,fill:"lightblue",stroke:"darkblue",strokeWidth:2},new n("figure","crossSectionType",this.getCrossSectionFigure.bind(this)),new n("width","width",t=>t*20),new n("height","height",t=>Math.max(t*4,20)),new n("fill","material",this.getMaterialColor.bind(this)),new n("stroke","selected",t=>t?"red":"darkblue")),e(h,{alignment:u.Top,alignmentFocus:u.Bottom,margin:5,font:"12px sans-serif",stroke:"black"},new n("text","name")),e(h,{alignment:u.Bottom,alignmentFocus:u.Top,margin:5,font:"10px sans-serif",stroke:"darkblue"},new n("text","",this.getSegmentInfo.bind(this)))))}setupStationTemplate(){const e=d.make;this.diagram.nodeTemplateMap.add("miner_station",e(g,"Auto",{locationSpot:u.Center,dragComputation:this.snapToGrid.bind(this)},new n("location","position",a.parse).makeTwoWay(a.stringify),e(o,"Circle",{width:30,height:30,fill:"yellow",stroke:"orange",strokeWidth:2}),e(h,{margin:2,font:"10px sans-serif",stroke:"black"},new n("text","stationId"))))}setupMeasurementTemplate(){const e=d.make;this.diagram.nodeTemplateMap.add("measurement",e(g,{selectable:!1,avoidable:!1},new n("location","position",a.parse),e(h,{font:"bold 11px sans-serif",stroke:"blue",background:"white",margin:2},new n("text","measurement"))))}setupLinkTemplate(){const e=d.make;this.diagram.linkTemplate=e(m,{routing:m.Orthogonal,corner:0,selectable:!0,reshapable:!0},new n("points").makeTwoWay(),e(o,{strokeWidth:4,stroke:"darkblue"},new n("stroke","tunnelType",this.getTunnelTypeColor.bind(this))),e(o,{toArrow:"Standard",fill:"darkblue",stroke:null,scale:1.5}))}setupTools(){this.setupDrawingTool(),this.setupMeasurementTool(),this.setupEditingTools()}setupDrawingTool(){const e=d.make;this.diagram.toolManager.mouseMoveTools.insertAt(0,e(b,{name:"TunnelDrawing",designer:this}))}setupMeasurementTool(){}setupEditingTools(){}setupEventHandlers(){this.diagram.addDiagramListener("BackgroundSingleClicked",this.onBackgroundClick.bind(this)),this.diagram.addDiagramListener("ObjectSingleClicked",this.onObjectClick.bind(this)),this.diagram.addDiagramListener("SelectionDeleted",this.onSelectionDeleted.bind(this)),this.setupKeyboardShortcuts()}setupKeyboardShortcuts(){document.addEventListener("keydown",e=>{if(this.diagram.div.contains(document.activeElement))switch(e.key.toLowerCase()){case"t":this.setDrawingMode("tunnel");break;case"s":this.setDrawingMode("station");break;case"m":this.setDrawingMode("measurement");break;case"escape":this.exitDrawingMode();break;case"delete":this.deleteSelected();break}})}snapToGrid(e,t,i){if(!this.config.snapToGrid)return i;const s=this.config.gridSize*20;return new a(Math.round(i.x/s)*s,Math.round(i.y/s)*s)}getCrossSectionFigure(e){switch(e){case"circle":return"Circle";case"square":return"Square";case"rectangle":return"Rectangle";case"horseshoe":return"RoundedRectangle";default:return"Circle"}}getMaterialColor(e){return{concrete:"lightgray",steel:"silver",rock:"brown",reinforced:"darkgray"}[e]||"lightblue"}getTunnelTypeColor(e){return{main:"darkblue",branch:"green",emergency:"red",ventilation:"cyan"}[e]||"darkblue"}getSegmentInfo(e){var t;return`${e.width}m × ${e.height}m
L: ${((t=e.length)==null?void 0:t.toFixed(1))||"0.0"}m`}onBackgroundClick(e){this.isDrawing&&this.addTunnelPoint(e.diagram.lastInput.documentPoint)}onObjectClick(e){const t=e.subject.part;t&&t.data&&this.selectObject(t.data)}onSelectionMoved(e){this.updateMeasurements()}onDiagramModified(e){this.onTunnelModified&&this.onTunnelModified(this.getTunnelData())}onSelectionDeleted(e){e.subject.each(t=>{t.data&&t.data.category==="tunnel_segment"&&this.tunnelData.segments.delete(t.data.key)})}onNodeDrop(e,t){}setDrawingMode(e){this.drawingMode=e,this.isDrawing=!0,this.diagram.div.style.cursor="crosshair",console.log(`📐 Çizim modu: ${e}`)}exitDrawingMode(){this.isDrawing=!1,this.drawingMode=null,this.currentTunnel=null,this.diagram.div.style.cursor="default",console.log("🔚 Çizim modu sonlandırıldı")}addTunnelPoint(e){if(this.drawingMode!=="tunnel")return;const t=this.snapToGrid(this.diagram,null,e);console.log(`📍 Tünel noktası eklendi: ${t.x}, ${t.y}`),this.currentTunnel?this.completeTunnelSegment(t):this.startNewTunnelSegment(t)}startNewTunnelSegment(e){this.currentTunnel={startPoint:e,segmentId:this.generateSegmentId(),width:this.config.defaultTunnelWidth,height:this.config.defaultTunnelHeight,crossSectionType:this.config.defaultCrossSectionType},console.log("🚇 Yeni tünel segmenti başlatıldı")}completeTunnelSegment(e){if(!this.currentTunnel)return;const t={key:this.currentTunnel.segmentId,category:"tunnel_segment",name:`T-${this.currentTunnel.segmentId}`,position:a.stringify(this.currentTunnel.startPoint),width:this.currentTunnel.width,height:this.currentTunnel.height,crossSectionType:this.currentTunnel.crossSectionType,length:this.calculateDistance(this.currentTunnel.startPoint,e),angle:this.calculateAngle(this.currentTunnel.startPoint,e),material:"concrete",tunnelType:"main"};this.diagram.model.addNodeData(t),this.tunnelData.segments.set(t.key,t),this.addMeasurement(this.currentTunnel.startPoint,e,t.length),console.log(`✅ Tünel segmenti tamamlandı: ${t.length.toFixed(2)}m`),this.onTunnelCreated&&this.onTunnelCreated(t),this.currentTunnel=null}addMeasurement(e,t,i){if(!this.config.showMeasurements)return;const s=new a((e.x+t.x)/2,(e.y+t.y)/2),l={key:this.generateMeasurementId(),category:"measurement",position:a.stringify(s),measurement:`${i.toFixed(2)}m`};this.diagram.model.addNodeData(l),this.tunnelData.measurements.set(l.key,l)}calculateDistance(e,t){const i=t.x-e.x,s=t.y-e.y;return Math.sqrt(i*i+s*s)/20}calculateAngle(e,t){const i=t.x-e.x,s=t.y-e.y;return Math.atan2(s,i)*180/Math.PI}generateSegmentId(){return`seg_${Date.now()}_${Math.random().toString(36).substr(2,5)}`}generateMeasurementId(){return`meas_${Date.now()}_${Math.random().toString(36).substr(2,3)}`}getTunnelData(){return{segments:Array.from(this.tunnelData.segments.values()),stations:Array.from(this.tunnelData.stations.values()),measurements:Array.from(this.tunnelData.measurements.values())}}exportTunnelData(){return JSON.stringify(this.getTunnelData(),null,2)}importTunnelData(e){try{const t=JSON.parse(e);this.loadTunnelData(t)}catch(t){console.error("❌ Veri import hatası:",t)}}loadTunnelData(e){var i,s,l;this.diagram.model.nodeDataArray=[],this.tunnelData.segments.clear(),this.tunnelData.stations.clear(),this.tunnelData.measurements.clear();const t=[...e.segments||[],...e.stations||[],...e.measurements||[]];this.diagram.model=new y(t),(i=e.segments)==null||i.forEach(r=>this.tunnelData.segments.set(r.key,r)),(s=e.stations)==null||s.forEach(r=>this.tunnelData.stations.set(r.key,r)),(l=e.measurements)==null||l.forEach(r=>this.tunnelData.measurements.set(r.key,r)),console.log("✅ Tünel verisi yüklendi")}updateMeasurements(){}deleteSelected(){this.diagram.commandHandler.deleteSelection()}selectObject(e){console.log("🎯 Seçilen obje:",e)}createSampleTunnel(){const e={segments:[{key:"sample_1",category:"tunnel_segment",name:"Ana Tünel 1",position:"100 100",width:3,height:3,length:26.49,angle:0,crossSectionType:"circle",material:"concrete",tunnelType:"main"},{key:"sample_2",category:"tunnel_segment",name:"Ana Tünel 2",position:"300 150",width:3,height:3,length:13.13,angle:45,crossSectionType:"circle",material:"concrete",tunnelType:"main"}],measurements:[{key:"meas_1",category:"measurement",position:"200 125",measurement:"26.49m"}]};this.loadTunnelData(e),console.log("🏗️ Örnek tünel oluşturuldu")}}class b extends D{constructor(){super(),this.name="TunnelDrawing",this.designer=null}canStart(){return this.designer&&this.designer.isDrawing}doMouseDown(){if(!this.canStart())return!1;const e=this.diagram.lastInput.documentPoint;return this.designer.addTunnelPoint(e),!0}doMouseMove(){return!0}}window.TunnelDesigner=S;
