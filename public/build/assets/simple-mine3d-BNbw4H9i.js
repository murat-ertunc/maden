import{R as N,l as m,m as we,Q as j,n as B,L as U,f as T,g as C,B as ie,e as Ee,M as u,o as re,p as L,q as Me,r as Z,s as ve,j as Se,E as qe,t as Be,W as be,a as Ze,b as Ae,u as Fe,d as Ce,v as pe,V as q,A as $e,D as Ve,w as xe,x as Te,y as Ke,z as Je,I as et,C as F,U as tt,J as it,K as st,S as nt,P as ot,O as at,N as ge,X as ke,H as rt,Y as me,G as lt,k as De,i as We,Z as ct,_ as ht,$ as dt,a0 as H,a1 as Re,a2 as He,a3 as Y,a4 as Q}from"./OrbitControls--CPrXAYj.js";const W=new N,k=new m,$=new m,E=new j,Oe={X:new m(1,0,0),Y:new m(0,1,0),Z:new m(0,0,1)},fe={type:"change"},ze={type:"mouseDown"},Ie={type:"mouseUp",mode:null},_e={type:"objectChange"};class mt extends we{constructor(e,t){super(),t===void 0&&(console.warn('THREE.TransformControls: The second parameter "domElement" is now mandatory.'),t=document),this.isTransformControls=!0,this.visible=!1,this.domElement=t,this.domElement.style.touchAction="none";const i=new wt;this._gizmo=i,this.add(i);const s=new vt;this._plane=s,this.add(s);const o=this;function n(x,f){let b=f;Object.defineProperty(o,x,{get:function(){return b!==void 0?b:f},set:function(v){b!==v&&(b=v,s[x]=v,i[x]=v,o.dispatchEvent({type:x+"-changed",value:v}),o.dispatchEvent(fe))}}),o[x]=f,s[x]=f,i[x]=f}n("camera",e),n("object",void 0),n("enabled",!0),n("axis",null),n("mode","translate"),n("translationSnap",null),n("rotationSnap",null),n("scaleSnap",null),n("space","world"),n("size",1),n("dragging",!1),n("showX",!0),n("showY",!0),n("showZ",!0);const a=new m,l=new m,c=new j,r=new j,d=new m,h=new j,g=new m,p=new m,w=new m,S=0,D=new m;n("worldPosition",a),n("worldPositionStart",l),n("worldQuaternion",c),n("worldQuaternionStart",r),n("cameraPosition",d),n("cameraQuaternion",h),n("pointStart",g),n("pointEnd",p),n("rotationAxis",w),n("rotationAngle",S),n("eye",D),this._offset=new m,this._startNorm=new m,this._endNorm=new m,this._cameraScale=new m,this._parentPosition=new m,this._parentQuaternion=new j,this._parentQuaternionInv=new j,this._parentScale=new m,this._worldScaleStart=new m,this._worldQuaternionInv=new j,this._worldScale=new m,this._positionStart=new m,this._quaternionStart=new j,this._scaleStart=new m,this._getPointer=ut.bind(this),this._onPointerDown=gt.bind(this),this._onPointerHover=pt.bind(this),this._onPointerMove=ft.bind(this),this._onPointerUp=yt.bind(this),this.domElement.addEventListener("pointerdown",this._onPointerDown),this.domElement.addEventListener("pointermove",this._onPointerHover),this.domElement.addEventListener("pointerup",this._onPointerUp)}updateMatrixWorld(){this.object!==void 0&&(this.object.updateMatrixWorld(),this.object.parent===null?console.error("TransformControls: The attached 3D object must be a part of the scene graph."):this.object.parent.matrixWorld.decompose(this._parentPosition,this._parentQuaternion,this._parentScale),this.object.matrixWorld.decompose(this.worldPosition,this.worldQuaternion,this._worldScale),this._parentQuaternionInv.copy(this._parentQuaternion).invert(),this._worldQuaternionInv.copy(this.worldQuaternion).invert()),this.camera.updateMatrixWorld(),this.camera.matrixWorld.decompose(this.cameraPosition,this.cameraQuaternion,this._cameraScale),this.camera.isOrthographicCamera?this.camera.getWorldDirection(this.eye).negate():this.eye.copy(this.cameraPosition).sub(this.worldPosition).normalize(),super.updateMatrixWorld(this)}pointerHover(e){if(this.object===void 0||this.dragging===!0)return;W.setFromCamera(e,this.camera);const t=ye(this._gizmo.picker[this.mode],W);t?this.axis=t.object.name:this.axis=null}pointerDown(e){if(!(this.object===void 0||this.dragging===!0||e.button!==0)&&this.axis!==null){W.setFromCamera(e,this.camera);const t=ye(this._plane,W,!0);t&&(this.object.updateMatrixWorld(),this.object.parent.updateMatrixWorld(),this._positionStart.copy(this.object.position),this._quaternionStart.copy(this.object.quaternion),this._scaleStart.copy(this.object.scale),this.object.matrixWorld.decompose(this.worldPositionStart,this.worldQuaternionStart,this._worldScaleStart),this.pointStart.copy(t.point).sub(this.worldPositionStart)),this.dragging=!0,ze.mode=this.mode,this.dispatchEvent(ze)}}pointerMove(e){const t=this.axis,i=this.mode,s=this.object;let o=this.space;if(i==="scale"?o="local":(t==="E"||t==="XYZE"||t==="XYZ")&&(o="world"),s===void 0||t===null||this.dragging===!1||e.button!==-1)return;W.setFromCamera(e,this.camera);const n=ye(this._plane,W,!0);if(n){if(this.pointEnd.copy(n.point).sub(this.worldPositionStart),i==="translate")this._offset.copy(this.pointEnd).sub(this.pointStart),o==="local"&&t!=="XYZ"&&this._offset.applyQuaternion(this._worldQuaternionInv),t.indexOf("X")===-1&&(this._offset.x=0),t.indexOf("Y")===-1&&(this._offset.y=0),t.indexOf("Z")===-1&&(this._offset.z=0),o==="local"&&t!=="XYZ"?this._offset.applyQuaternion(this._quaternionStart).divide(this._parentScale):this._offset.applyQuaternion(this._parentQuaternionInv).divide(this._parentScale),s.position.copy(this._offset).add(this._positionStart),this.translationSnap&&(o==="local"&&(s.position.applyQuaternion(E.copy(this._quaternionStart).invert()),t.search("X")!==-1&&(s.position.x=Math.round(s.position.x/this.translationSnap)*this.translationSnap),t.search("Y")!==-1&&(s.position.y=Math.round(s.position.y/this.translationSnap)*this.translationSnap),t.search("Z")!==-1&&(s.position.z=Math.round(s.position.z/this.translationSnap)*this.translationSnap),s.position.applyQuaternion(this._quaternionStart)),o==="world"&&(s.parent&&s.position.add(k.setFromMatrixPosition(s.parent.matrixWorld)),t.search("X")!==-1&&(s.position.x=Math.round(s.position.x/this.translationSnap)*this.translationSnap),t.search("Y")!==-1&&(s.position.y=Math.round(s.position.y/this.translationSnap)*this.translationSnap),t.search("Z")!==-1&&(s.position.z=Math.round(s.position.z/this.translationSnap)*this.translationSnap),s.parent&&s.position.sub(k.setFromMatrixPosition(s.parent.matrixWorld))));else if(i==="scale"){if(t.search("XYZ")!==-1){let a=this.pointEnd.length()/this.pointStart.length();this.pointEnd.dot(this.pointStart)<0&&(a*=-1),$.set(a,a,a)}else k.copy(this.pointStart),$.copy(this.pointEnd),k.applyQuaternion(this._worldQuaternionInv),$.applyQuaternion(this._worldQuaternionInv),$.divide(k),t.search("X")===-1&&($.x=1),t.search("Y")===-1&&($.y=1),t.search("Z")===-1&&($.z=1);s.scale.copy(this._scaleStart).multiply($),this.scaleSnap&&(t.search("X")!==-1&&(s.scale.x=Math.round(s.scale.x/this.scaleSnap)*this.scaleSnap||this.scaleSnap),t.search("Y")!==-1&&(s.scale.y=Math.round(s.scale.y/this.scaleSnap)*this.scaleSnap||this.scaleSnap),t.search("Z")!==-1&&(s.scale.z=Math.round(s.scale.z/this.scaleSnap)*this.scaleSnap||this.scaleSnap))}else if(i==="rotate"){this._offset.copy(this.pointEnd).sub(this.pointStart);const a=20/this.worldPosition.distanceTo(k.setFromMatrixPosition(this.camera.matrixWorld));let l=!1;t==="XYZE"?(this.rotationAxis.copy(this._offset).cross(this.eye).normalize(),this.rotationAngle=this._offset.dot(k.copy(this.rotationAxis).cross(this.eye))*a):(t==="X"||t==="Y"||t==="Z")&&(this.rotationAxis.copy(Oe[t]),k.copy(Oe[t]),o==="local"&&k.applyQuaternion(this.worldQuaternion),k.cross(this.eye),k.length()===0?l=!0:this.rotationAngle=this._offset.dot(k.normalize())*a),(t==="E"||l)&&(this.rotationAxis.copy(this.eye),this.rotationAngle=this.pointEnd.angleTo(this.pointStart),this._startNorm.copy(this.pointStart).normalize(),this._endNorm.copy(this.pointEnd).normalize(),this.rotationAngle*=this._endNorm.cross(this._startNorm).dot(this.eye)<0?1:-1),this.rotationSnap&&(this.rotationAngle=Math.round(this.rotationAngle/this.rotationSnap)*this.rotationSnap),o==="local"&&t!=="E"&&t!=="XYZE"?(s.quaternion.copy(this._quaternionStart),s.quaternion.multiply(E.setFromAxisAngle(this.rotationAxis,this.rotationAngle)).normalize()):(this.rotationAxis.applyQuaternion(this._parentQuaternionInv),s.quaternion.copy(E.setFromAxisAngle(this.rotationAxis,this.rotationAngle)),s.quaternion.multiply(this._quaternionStart).normalize())}this.dispatchEvent(fe),this.dispatchEvent(_e)}}pointerUp(e){e.button===0&&(this.dragging&&this.axis!==null&&(Ie.mode=this.mode,this.dispatchEvent(Ie)),this.dragging=!1,this.axis=null)}dispose(){this.domElement.removeEventListener("pointerdown",this._onPointerDown),this.domElement.removeEventListener("pointermove",this._onPointerHover),this.domElement.removeEventListener("pointermove",this._onPointerMove),this.domElement.removeEventListener("pointerup",this._onPointerUp),this.traverse(function(e){e.geometry&&e.geometry.dispose(),e.material&&e.material.dispose()})}attach(e){return this.object=e,this.visible=!0,this}detach(){return this.object=void 0,this.visible=!1,this.axis=null,this}reset(){this.enabled&&this.dragging&&(this.object.position.copy(this._positionStart),this.object.quaternion.copy(this._quaternionStart),this.object.scale.copy(this._scaleStart),this.dispatchEvent(fe),this.dispatchEvent(_e),this.pointStart.copy(this.pointEnd))}getRaycaster(){return W}getMode(){return this.mode}setMode(e){this.mode=e}setTranslationSnap(e){this.translationSnap=e}setRotationSnap(e){this.rotationSnap=e}setScaleSnap(e){this.scaleSnap=e}setSize(e){this.size=e}setSpace(e){this.space=e}}function ut(y){if(this.domElement.ownerDocument.pointerLockElement)return{x:0,y:0,button:y.button};{const e=this.domElement.getBoundingClientRect();return{x:(y.clientX-e.left)/e.width*2-1,y:-(y.clientY-e.top)/e.height*2+1,button:y.button}}}function pt(y){if(this.enabled)switch(y.pointerType){case"mouse":case"pen":this.pointerHover(this._getPointer(y));break}}function gt(y){this.enabled&&(document.pointerLockElement||this.domElement.setPointerCapture(y.pointerId),this.domElement.addEventListener("pointermove",this._onPointerMove),this.pointerHover(this._getPointer(y)),this.pointerDown(this._getPointer(y)))}function ft(y){this.enabled&&this.pointerMove(this._getPointer(y))}function yt(y){this.enabled&&(this.domElement.releasePointerCapture(y.pointerId),this.domElement.removeEventListener("pointermove",this._onPointerMove),this.pointerUp(this._getPointer(y)))}function ye(y,e,t){const i=e.intersectObject(y,!0);for(let s=0;s<i.length;s++)if(i[s].object.visible||t)return i[s];return!1}const le=new qe,P=new m(0,1,0),Le=new m(0,0,0),Ge=new Be,ce=new j,de=new j,G=new m,je=new Be,ee=new m(1,0,0),R=new m(0,1,0),te=new m(0,0,1),he=new m,K=new m,J=new m;class wt extends we{constructor(){super(),this.isTransformControlsGizmo=!0,this.type="TransformControlsGizmo";const e=new B({depthTest:!1,depthWrite:!1,fog:!1,toneMapped:!1,transparent:!0}),t=new U({depthTest:!1,depthWrite:!1,fog:!1,toneMapped:!1,transparent:!0}),i=e.clone();i.opacity=.15;const s=t.clone();s.opacity=.5;const o=e.clone();o.color.setHex(16711680);const n=e.clone();n.color.setHex(65280);const a=e.clone();a.color.setHex(255);const l=e.clone();l.color.setHex(16711680),l.opacity=.5;const c=e.clone();c.color.setHex(65280),c.opacity=.5;const r=e.clone();r.color.setHex(255),r.opacity=.5;const d=e.clone();d.opacity=.25;const h=e.clone();h.color.setHex(16776960),h.opacity=.25,e.clone().color.setHex(16776960);const p=e.clone();p.color.setHex(7895160);const w=new T(0,.04,.1,12);w.translate(0,.05,0);const S=new C(.08,.08,.08);S.translate(0,.04,0);const D=new ie;D.setAttribute("position",new Ee([0,0,0,1,0,0],3));const x=new T(.0075,.0075,.5,3);x.translate(0,.25,0);function f(I,se){const _=new Z(I,.0075,3,64,se*Math.PI*2);return _.rotateY(Math.PI/2),_.rotateX(Math.PI/2),_}function b(){const I=new ie;return I.setAttribute("position",new Ee([0,0,0,1,1,1],3)),I}const v={X:[[new u(w,o),[.5,0,0],[0,0,-Math.PI/2]],[new u(w,o),[-.5,0,0],[0,0,Math.PI/2]],[new u(x,o),[0,0,0],[0,0,-Math.PI/2]]],Y:[[new u(w,n),[0,.5,0]],[new u(w,n),[0,-.5,0],[Math.PI,0,0]],[new u(x,n)]],Z:[[new u(w,a),[0,0,.5],[Math.PI/2,0,0]],[new u(w,a),[0,0,-.5],[-Math.PI/2,0,0]],[new u(x,a),null,[Math.PI/2,0,0]]],XYZ:[[new u(new re(.1,0),d.clone()),[0,0,0]]],XY:[[new u(new C(.15,.15,.01),r.clone()),[.15,.15,0]]],YZ:[[new u(new C(.15,.15,.01),l.clone()),[0,.15,.15],[0,Math.PI/2,0]]],XZ:[[new u(new C(.15,.15,.01),c.clone()),[.15,0,.15],[-Math.PI/2,0,0]]]},M={X:[[new u(new T(.2,0,.6,4),i),[.3,0,0],[0,0,-Math.PI/2]],[new u(new T(.2,0,.6,4),i),[-.3,0,0],[0,0,Math.PI/2]]],Y:[[new u(new T(.2,0,.6,4),i),[0,.3,0]],[new u(new T(.2,0,.6,4),i),[0,-.3,0],[0,0,Math.PI]]],Z:[[new u(new T(.2,0,.6,4),i),[0,0,.3],[Math.PI/2,0,0]],[new u(new T(.2,0,.6,4),i),[0,0,-.3],[-Math.PI/2,0,0]]],XYZ:[[new u(new re(.2,0),i)]],XY:[[new u(new C(.2,.2,.01),i),[.15,.15,0]]],YZ:[[new u(new C(.2,.2,.01),i),[0,.15,.15],[0,Math.PI/2,0]]],XZ:[[new u(new C(.2,.2,.01),i),[.15,0,.15],[-Math.PI/2,0,0]]]},O={START:[[new u(new re(.01,2),s),null,null,null,"helper"]],END:[[new u(new re(.01,2),s),null,null,null,"helper"]],DELTA:[[new L(b(),s),null,null,null,"helper"]],X:[[new L(D,s.clone()),[-1e3,0,0],null,[1e6,1,1],"helper"]],Y:[[new L(D,s.clone()),[0,-1e3,0],[0,0,Math.PI/2],[1e6,1,1],"helper"]],Z:[[new L(D,s.clone()),[0,0,-1e3],[0,-Math.PI/2,0],[1e6,1,1],"helper"]]},ue={XYZE:[[new u(f(.5,1),p),null,[0,Math.PI/2,0]]],X:[[new u(f(.5,.5),o)]],Y:[[new u(f(.5,.5),n),null,[0,0,-Math.PI/2]]],Z:[[new u(f(.5,.5),a),null,[0,Math.PI/2,0]]],E:[[new u(f(.75,1),h),null,[0,Math.PI/2,0]]]},V={AXIS:[[new L(D,s.clone()),[-1e3,0,0],null,[1e6,1,1],"helper"]]},Ue={XYZE:[[new u(new Me(.25,10,8),i)]],X:[[new u(new Z(.5,.1,4,24),i),[0,0,0],[0,-Math.PI/2,-Math.PI/2]]],Y:[[new u(new Z(.5,.1,4,24),i),[0,0,0],[Math.PI/2,0,0]]],Z:[[new u(new Z(.5,.1,4,24),i),[0,0,0],[0,0,-Math.PI/2]]],E:[[new u(new Z(.75,.1,2,24),i)]]},Ne={X:[[new u(S,o),[.5,0,0],[0,0,-Math.PI/2]],[new u(x,o),[0,0,0],[0,0,-Math.PI/2]],[new u(S,o),[-.5,0,0],[0,0,Math.PI/2]]],Y:[[new u(S,n),[0,.5,0]],[new u(x,n)],[new u(S,n),[0,-.5,0],[0,0,Math.PI]]],Z:[[new u(S,a),[0,0,.5],[Math.PI/2,0,0]],[new u(x,a),[0,0,0],[Math.PI/2,0,0]],[new u(S,a),[0,0,-.5],[-Math.PI/2,0,0]]],XY:[[new u(new C(.15,.15,.01),r),[.15,.15,0]]],YZ:[[new u(new C(.15,.15,.01),l),[0,.15,.15],[0,Math.PI/2,0]]],XZ:[[new u(new C(.15,.15,.01),c),[.15,0,.15],[-Math.PI/2,0,0]]],XYZ:[[new u(new C(.1,.1,.1),d.clone())]]},Xe={X:[[new u(new T(.2,0,.6,4),i),[.3,0,0],[0,0,-Math.PI/2]],[new u(new T(.2,0,.6,4),i),[-.3,0,0],[0,0,Math.PI/2]]],Y:[[new u(new T(.2,0,.6,4),i),[0,.3,0]],[new u(new T(.2,0,.6,4),i),[0,-.3,0],[0,0,Math.PI]]],Z:[[new u(new T(.2,0,.6,4),i),[0,0,.3],[Math.PI/2,0,0]],[new u(new T(.2,0,.6,4),i),[0,0,-.3],[-Math.PI/2,0,0]]],XY:[[new u(new C(.2,.2,.01),i),[.15,.15,0]]],YZ:[[new u(new C(.2,.2,.01),i),[0,.15,.15],[0,Math.PI/2,0]]],XZ:[[new u(new C(.2,.2,.01),i),[.15,0,.15],[-Math.PI/2,0,0]]],XYZ:[[new u(new C(.2,.2,.2),i),[0,0,0]]]},Ye={X:[[new L(D,s.clone()),[-1e3,0,0],null,[1e6,1,1],"helper"]],Y:[[new L(D,s.clone()),[0,-1e3,0],[0,0,Math.PI/2],[1e6,1,1],"helper"]],Z:[[new L(D,s.clone()),[0,0,-1e3],[0,-Math.PI/2,0],[1e6,1,1],"helper"]]};function A(I){const se=new we;for(const _ in I)for(let X=I[_].length;X--;){const z=I[_][X][0].clone(),ne=I[_][X][1],oe=I[_][X][2],ae=I[_][X][3],Qe=I[_][X][4];z.name=_,z.tag=Qe,ne&&z.position.set(ne[0],ne[1],ne[2]),oe&&z.rotation.set(oe[0],oe[1],oe[2]),ae&&z.scale.set(ae[0],ae[1],ae[2]),z.updateMatrix();const Pe=z.geometry.clone();Pe.applyMatrix4(z.matrix),z.geometry=Pe,z.renderOrder=1/0,z.position.set(0,0,0),z.rotation.set(0,0,0),z.scale.set(1,1,1),se.add(z)}return se}this.gizmo={},this.picker={},this.helper={},this.add(this.gizmo.translate=A(v)),this.add(this.gizmo.rotate=A(ue)),this.add(this.gizmo.scale=A(Ne)),this.add(this.picker.translate=A(M)),this.add(this.picker.rotate=A(Ue)),this.add(this.picker.scale=A(Xe)),this.add(this.helper.translate=A(O)),this.add(this.helper.rotate=A(V)),this.add(this.helper.scale=A(Ye)),this.picker.translate.visible=!1,this.picker.rotate.visible=!1,this.picker.scale.visible=!1}updateMatrixWorld(e){const i=(this.mode==="scale"?"local":this.space)==="local"?this.worldQuaternion:de;this.gizmo.translate.visible=this.mode==="translate",this.gizmo.rotate.visible=this.mode==="rotate",this.gizmo.scale.visible=this.mode==="scale",this.helper.translate.visible=this.mode==="translate",this.helper.rotate.visible=this.mode==="rotate",this.helper.scale.visible=this.mode==="scale";let s=[];s=s.concat(this.picker[this.mode].children),s=s.concat(this.gizmo[this.mode].children),s=s.concat(this.helper[this.mode].children);for(let o=0;o<s.length;o++){const n=s[o];n.visible=!0,n.rotation.set(0,0,0),n.position.copy(this.worldPosition);let a;if(this.camera.isOrthographicCamera?a=(this.camera.top-this.camera.bottom)/this.camera.zoom:a=this.worldPosition.distanceTo(this.cameraPosition)*Math.min(1.9*Math.tan(Math.PI*this.camera.fov/360)/this.camera.zoom,7),n.scale.set(1,1,1).multiplyScalar(a*this.size/4),n.tag==="helper"){n.visible=!1,n.name==="AXIS"?(n.visible=!!this.axis,this.axis==="X"&&(E.setFromEuler(le.set(0,0,0)),n.quaternion.copy(i).multiply(E),Math.abs(P.copy(ee).applyQuaternion(i).dot(this.eye))>.9&&(n.visible=!1)),this.axis==="Y"&&(E.setFromEuler(le.set(0,0,Math.PI/2)),n.quaternion.copy(i).multiply(E),Math.abs(P.copy(R).applyQuaternion(i).dot(this.eye))>.9&&(n.visible=!1)),this.axis==="Z"&&(E.setFromEuler(le.set(0,Math.PI/2,0)),n.quaternion.copy(i).multiply(E),Math.abs(P.copy(te).applyQuaternion(i).dot(this.eye))>.9&&(n.visible=!1)),this.axis==="XYZE"&&(E.setFromEuler(le.set(0,Math.PI/2,0)),P.copy(this.rotationAxis),n.quaternion.setFromRotationMatrix(Ge.lookAt(Le,P,R)),n.quaternion.multiply(E),n.visible=this.dragging),this.axis==="E"&&(n.visible=!1)):n.name==="START"?(n.position.copy(this.worldPositionStart),n.visible=this.dragging):n.name==="END"?(n.position.copy(this.worldPosition),n.visible=this.dragging):n.name==="DELTA"?(n.position.copy(this.worldPositionStart),n.quaternion.copy(this.worldQuaternionStart),k.set(1e-10,1e-10,1e-10).add(this.worldPositionStart).sub(this.worldPosition).multiplyScalar(-1),k.applyQuaternion(this.worldQuaternionStart.clone().invert()),n.scale.copy(k),n.visible=this.dragging):(n.quaternion.copy(i),this.dragging?n.position.copy(this.worldPositionStart):n.position.copy(this.worldPosition),this.axis&&(n.visible=this.axis.search(n.name)!==-1));continue}n.quaternion.copy(i),this.mode==="translate"||this.mode==="scale"?(n.name==="X"&&Math.abs(P.copy(ee).applyQuaternion(i).dot(this.eye))>.99&&(n.scale.set(1e-10,1e-10,1e-10),n.visible=!1),n.name==="Y"&&Math.abs(P.copy(R).applyQuaternion(i).dot(this.eye))>.99&&(n.scale.set(1e-10,1e-10,1e-10),n.visible=!1),n.name==="Z"&&Math.abs(P.copy(te).applyQuaternion(i).dot(this.eye))>.99&&(n.scale.set(1e-10,1e-10,1e-10),n.visible=!1),n.name==="XY"&&Math.abs(P.copy(te).applyQuaternion(i).dot(this.eye))<.2&&(n.scale.set(1e-10,1e-10,1e-10),n.visible=!1),n.name==="YZ"&&Math.abs(P.copy(ee).applyQuaternion(i).dot(this.eye))<.2&&(n.scale.set(1e-10,1e-10,1e-10),n.visible=!1),n.name==="XZ"&&Math.abs(P.copy(R).applyQuaternion(i).dot(this.eye))<.2&&(n.scale.set(1e-10,1e-10,1e-10),n.visible=!1)):this.mode==="rotate"&&(ce.copy(i),P.copy(this.eye).applyQuaternion(E.copy(i).invert()),n.name.search("E")!==-1&&n.quaternion.setFromRotationMatrix(Ge.lookAt(this.eye,Le,R)),n.name==="X"&&(E.setFromAxisAngle(ee,Math.atan2(-P.y,P.z)),E.multiplyQuaternions(ce,E),n.quaternion.copy(E)),n.name==="Y"&&(E.setFromAxisAngle(R,Math.atan2(P.x,P.z)),E.multiplyQuaternions(ce,E),n.quaternion.copy(E)),n.name==="Z"&&(E.setFromAxisAngle(te,Math.atan2(P.y,P.x)),E.multiplyQuaternions(ce,E),n.quaternion.copy(E))),n.visible=n.visible&&(n.name.indexOf("X")===-1||this.showX),n.visible=n.visible&&(n.name.indexOf("Y")===-1||this.showY),n.visible=n.visible&&(n.name.indexOf("Z")===-1||this.showZ),n.visible=n.visible&&(n.name.indexOf("E")===-1||this.showX&&this.showY&&this.showZ),n.material._color=n.material._color||n.material.color.clone(),n.material._opacity=n.material._opacity||n.material.opacity,n.material.color.copy(n.material._color),n.material.opacity=n.material._opacity,this.enabled&&this.axis&&(n.name===this.axis||this.axis.split("").some(function(l){return n.name===l}))&&(n.material.color.setHex(16776960),n.material.opacity=1)}super.updateMatrixWorld(e)}}class vt extends u{constructor(){super(new ve(1e5,1e5,2,2),new B({visible:!1,wireframe:!0,side:Se,transparent:!0,opacity:.1,toneMapped:!1})),this.isTransformControlsPlane=!0,this.type="TransformControlsPlane"}updateMatrixWorld(e){let t=this.space;switch(this.position.copy(this.worldPosition),this.mode==="scale"&&(t="local"),he.copy(ee).applyQuaternion(t==="local"?this.worldQuaternion:de),K.copy(R).applyQuaternion(t==="local"?this.worldQuaternion:de),J.copy(te).applyQuaternion(t==="local"?this.worldQuaternion:de),P.copy(K),this.mode){case"translate":case"scale":switch(this.axis){case"X":P.copy(this.eye).cross(he),G.copy(he).cross(P);break;case"Y":P.copy(this.eye).cross(K),G.copy(K).cross(P);break;case"Z":P.copy(this.eye).cross(J),G.copy(J).cross(P);break;case"XY":G.copy(J);break;case"YZ":G.copy(he);break;case"XZ":P.copy(J),G.copy(K);break;case"XYZ":case"E":G.set(0,0,0);break}break;case"rotate":default:G.set(0,0,0)}G.length()===0?this.quaternion.copy(this.cameraQuaternion):(je.lookAt(k.set(0,0,0),G,P),this.quaternion.setFromRotationMatrix(je)),super.updateMatrixWorld(e)}}class bt{constructor(e,t={}){this.container=e,this.options={antialias:!0,alpha:!0,powerPreference:"high-performance",stencil:!0,depth:!0,logarithmicDepthBuffer:!0,...t},this.renderer=null,this.isWebGL2Supported=!1,this.capabilities={},this.extensions=new Map,this.init()}init(){const e=document.createElement("canvas"),t=e.getContext("webgl2",this.options);t?(this.isWebGL2Supported=!0,console.log("✅ WebGL2 supported and initialized"),this.renderer=new be({canvas:e,context:t,...this.options}),this.setupWebGL2Features()):(console.warn("⚠️ WebGL2 not supported, falling back to WebGL1"),this.isWebGL2Supported=!1,this.renderer=new be(this.options)),this.setupRenderer(),this.container.appendChild(this.renderer.domElement)}setupWebGL2Features(){if(!this.isWebGL2Supported)return;const e=this.renderer.getContext();this.capabilities={maxTextureSize:e.getParameter(e.MAX_TEXTURE_SIZE),maxCubeMapTextureSize:e.getParameter(e.MAX_CUBE_MAP_TEXTURE_SIZE),maxArrayTextureLayers:e.getParameter(e.MAX_ARRAY_TEXTURE_LAYERS),max3DTextureSize:e.getParameter(e.MAX_3D_TEXTURE_SIZE),maxVertexUniformBlocks:e.getParameter(e.MAX_VERTEX_UNIFORM_BLOCKS),maxFragmentUniformBlocks:e.getParameter(e.MAX_FRAGMENT_UNIFORM_BLOCKS),maxUniformBlockSize:e.getParameter(e.MAX_UNIFORM_BLOCK_SIZE),maxVertexOutputComponents:e.getParameter(e.MAX_VERTEX_OUTPUT_COMPONENTS),maxFragmentInputComponents:e.getParameter(e.MAX_FRAGMENT_INPUT_COMPONENTS)},e.getSupportedExtensions().forEach(i=>{if(i.includes("EXT_")||i.includes("WEBGL_")||i.includes("OES_"))try{const s=e.getExtension(i);s&&this.extensions.set(i,s)}catch{console.warn(`Failed to load extension: ${i}`)}}),console.log("📊 WebGL2 Capabilities:",this.capabilities),console.log("🔧 Available Extensions:",Array.from(this.extensions.keys())),this.setupAdvancedFeatures()}setupAdvancedFeatures(){const e=this.renderer;this.isWebGL2Supported&&(e.shadowMap.enabled=!0,e.shadowMap.type=Ze,e.shadowMap.autoUpdate=!0),e.outputColorSpace=Ae,e.toneMapping=Fe,e.toneMappingExposure=1.2,e.sortObjects=!0,e.setClearColor(8900331,1)}setupRenderer(){this.renderer.setSize(this.container.clientWidth,this.container.clientHeight),this.renderer.setPixelRatio(Math.min(window.devicePixelRatio,2)),this.renderer.info.autoReset=!1,this.setupDebugInfo()}setupDebugInfo(){this.performanceMonitor={frameCount:0,lastTime:performance.now(),fps:0,drawCalls:0,triangles:0,points:0,lines:0},this.options.debug&&this.createDebugPanel()}createDebugPanel(){const e=document.createElement("div");e.id="webgl2-debug-panel",e.style.cssText=`
            position: fixed;
            top: 10px;
            left: 10px;
            background: rgba(0,0,0,0.8);
            color: #00ff00;
            font-family: 'Courier New', monospace;
            font-size: 12px;
            padding: 10px;
            border-radius: 5px;
            z-index: 10000;
            min-width: 200px;
        `,e.innerHTML=`
            <div><strong>🚀 WebGL${this.isWebGL2Supported?"2":"1"} Renderer</strong></div>
            <div id="fps-counter">FPS: --</div>
            <div id="draw-calls">Draw Calls: --</div>
            <div id="triangles">Triangles: --</div>
            <div id="memory-usage">Memory: --</div>
            <div id="webgl-version">Version: ${this.isWebGL2Supported?"WebGL2":"WebGL1"}</div>
        `,document.body.appendChild(e),this.debugPanel=e}updateDebugInfo(){if(!this.debugPanel)return;const e=this.performanceMonitor,t=this.renderer.info;e.frameCount++;const i=performance.now();if(i-e.lastTime>=1e3){e.fps=Math.round(e.frameCount*1e3/(i-e.lastTime)),e.frameCount=0,e.lastTime=i,document.getElementById("fps-counter").textContent=`FPS: ${e.fps}`,document.getElementById("draw-calls").textContent=`Draw Calls: ${t.render.calls}`,document.getElementById("triangles").textContent=`Triangles: ${t.render.triangles}`;const s=(t.memory.geometries+t.memory.textures)*.001;document.getElementById("memory-usage").textContent=`Memory: ${s.toFixed(1)}MB`}}createAdvancedMaterial(e,t={}){const i={transparent:t.transparent||!1,opacity:t.opacity||1,color:t.color||16777215,...t};let s;switch(e){case"tunnel":s=new pe({...i,metalness:.1,roughness:.8,clearcoat:.1,clearcoatRoughness:.2,reflectivity:.1,sheen:.1,sheenColor:4473924});break;case"rock":s=new Ce({...i,metalness:.05,roughness:.95,normalScale:new q(.5,.5)});break;case"metal":s=new pe({...i,metalness:.9,roughness:.1,clearcoat:1,clearcoatRoughness:.1,reflectivity:.9});break;case"conveyor":s=new pe({...i,metalness:.3,roughness:.4,clearcoat:.8,clearcoatRoughness:.2,sheen:.2,sheenColor:16755200});break;default:s=new Ce(i)}return this.isWebGL2Supported&&(s.defines=s.defines||{},s.defines.USE_WEBGL2=""),s}createAdvancedLighting(e){const t={ambient:null,directional:null,shadows:[]};t.ambient=new $e(4210752,.4),e.add(t.ambient),t.directional=new Ve(16777215,.8),t.directional.position.set(50,50,25),t.directional.castShadow=!0,this.isWebGL2Supported?(t.directional.shadow.mapSize.width=4096,t.directional.shadow.mapSize.height=4096,t.directional.shadow.camera.near=.1,t.directional.shadow.camera.far=200,t.directional.shadow.camera.left=-50,t.directional.shadow.camera.right=50,t.directional.shadow.camera.top=50,t.directional.shadow.camera.bottom=-50,t.directional.shadow.bias=-1e-4,t.directional.shadow.normalBias=.02):(t.directional.shadow.mapSize.width=2048,t.directional.shadow.mapSize.height=2048),e.add(t.directional);const i=new xe(16753920,.5,30);i.position.set(-10,-5,10),i.castShadow=this.isWebGL2Supported,e.add(i);const s=new xe(16753920,.5,30);return s.position.set(15,-5,-10),s.castShadow=this.isWebGL2Supported,e.add(s),t.shadows.push(i,s),t}render(e,t){this.renderer.render(e,t),this.options.debug&&this.updateDebugInfo(),this.renderer.info.reset()}resize(e,t){this.renderer.setSize(e,t),this.renderer.setPixelRatio(Math.min(window.devicePixelRatio,2))}dispose(){this.debugPanel&&document.body.removeChild(this.debugPanel),this.renderer.dispose(),this.extensions.clear()}supportsInstancedRendering(){return this.isWebGL2Supported}supportsVolumeRendering(){return this.isWebGL2Supported&&this.extensions.has("EXT_texture_3D")}getMaxTextureUnits(){return this.capabilities.maxTextureSize||16}}class xt{constructor(e,t={}){this.scene=e,this.options={enableSpatialPartitioning:!0,gridSize:10,maxObjectsPerCell:20,enableContinuousDetection:!0,debugVisualization:t.debug||!1,toleranceDistance:.1,...t},this.spatialGrid=new Map,this.dynamicObjects=new Set,this.staticObjects=new Set,this.collisionPairs=new Set,this.callbacks=new Map,this.raycaster=new N,this.tempBox3=new Te,this.tempSphere=new Ke,this.tempVector=new m,this.debugMeshes=[],this.init()}init(){console.log("🔍 Collision Detection System initialized"),this.options.debugVisualization&&this.setupDebugVisualization()}registerObject(e,t="static",i={}){return e.userData||(e.userData={}),e.userData.collisionData={type:t,enabled:!0,bounds:null,lastPosition:e.position.clone(),velocity:new m,metadata:i,id:e.uuid||Je.generateUUID()},this.updateObjectBounds(e),t==="dynamic"?this.dynamicObjects.add(e):this.staticObjects.add(e),this.options.enableSpatialPartitioning&&this.addToSpatialGrid(e),console.log(`📦 Registered ${t} object for collision:`,e.userData.collisionData.id),e.userData.collisionData.id}unregisterObject(e){var i;if(!((i=e.userData)!=null&&i.collisionData))return;const t=e.userData.collisionData.id;this.dynamicObjects.delete(e),this.staticObjects.delete(e),this.removeFromSpatialGrid(e),this.callbacks.delete(t),delete e.userData.collisionData,console.log("🗑️ Unregistered collision object:",t)}updateObjectBounds(e){var i;if(!((i=e.userData)!=null&&i.collisionData))return;const t=e.userData.collisionData;if(e.geometry){e.geometry.boundingBox||e.geometry.computeBoundingBox();const s=e.geometry.boundingBox.clone();s.applyMatrix4(e.matrixWorld),t.bounds=s}else{const s=new Te().setFromObject(e);t.bounds=s}if(this.options.enableSpatialPartitioning){const s=e.position.clone();s.distanceTo(t.lastPosition)>.1&&(this.removeFromSpatialGrid(e),this.addToSpatialGrid(e),t.lastPosition.copy(s))}}getGridKey(e){const t=this.options.gridSize,i=Math.floor(e.x/t),s=Math.floor(e.y/t),o=Math.floor(e.z/t);return`${i},${s},${o}`}addToSpatialGrid(e){var l,c;if(!((c=(l=e.userData)==null?void 0:l.collisionData)!=null&&c.bounds))return;const t=e.userData.collisionData.bounds,i=t.min,s=t.max,o=this.options.gridSize,n={x:Math.floor(i.x/o),y:Math.floor(i.y/o),z:Math.floor(i.z/o)},a={x:Math.floor(s.x/o),y:Math.floor(s.y/o),z:Math.floor(s.z/o)};for(let r=n.x;r<=a.x;r++)for(let d=n.y;d<=a.y;d++)for(let h=n.z;h<=a.z;h++){const g=`${r},${d},${h}`;this.spatialGrid.has(g)||this.spatialGrid.set(g,new Set),this.spatialGrid.get(g).add(e)}}removeFromSpatialGrid(e){for(const[t,i]of this.spatialGrid)i.delete(e),i.size===0&&this.spatialGrid.delete(t)}getNearbyObjects(e,t=5){if(!this.options.enableSpatialPartitioning)return new Set([...this.staticObjects,...this.dynamicObjects]);const i=e.position,s=this.options.gridSize,o=Math.ceil(t/s),n=new Set,a={x:Math.floor(i.x/s),y:Math.floor(i.y/s),z:Math.floor(i.z/s)};for(let l=a.x-o;l<=a.x+o;l++)for(let c=a.y-o;c<=a.y+o;c++)for(let r=a.z-o;r<=a.z+o;r++){const d=`${l},${c},${r}`,h=this.spatialGrid.get(d);h&&h.forEach(g=>{g!==e&&n.add(g)})}return n}update(){this.dynamicObjects.forEach(e=>{this.updateObjectBounds(e)}),this.collisionPairs.clear(),this.dynamicObjects.forEach(e=>{var i,s;if(!((s=(i=e.userData)==null?void 0:i.collisionData)!=null&&s.enabled))return;this.getNearbyObjects(e,10).forEach(o=>{var a,l;if(!((l=(a=o.userData)==null?void 0:a.collisionData)!=null&&l.enabled)||e===o)return;const n=this.checkCollision(e,o);if(n){const c=this.getCollisionPairId(e,o);this.collisionPairs.add(c),this.handleCollision(e,o,n)}})}),this.options.debugVisualization&&this.updateDebugVisualization()}checkCollision(e,t){const i=e.userData.collisionData,s=t.userData.collisionData;if(!i||!s||!i.bounds||!s.bounds||!i.bounds.intersectsBox(s.bounds))return null;const o=this.detailedCollisionCheck(e,t);return o?{object1:e,object2:t,point:o.point,normal:o.normal,penetration:o.penetration,distance:o.distance}:null}detailedCollisionCheck(e,t){const i=e.userData.collisionData.metadata.type||"box",s=t.userData.collisionData.metadata.type||"box";return i==="tunnel"||s==="tunnel"?this.checkTunnelCollision(e,t):i==="path"||s==="path"?this.checkPathCollision(e,t):this.checkBoxCollision(e,t)}checkTunnelCollision(e,t){const i=e.userData.collisionData,s=t.userData.collisionData;if(!i.bounds||!s.bounds)return null;const o=i.bounds,n=s.bounds,a=o.clone().intersect(n);if(a.isEmpty())return null;const l=a.getSize(new m),c=Math.min(l.x,l.y,l.z),r=o.getCenter(new m),d=n.getCenter(new m),h=d.clone().sub(r).normalize();return{point:a.getCenter(new m),normal:h,penetration:c,distance:r.distanceTo(d)}}checkPathCollision(e,t){var o;const i=e.userData.pathData,s=t.userData.collisionData.bounds;if(!i||!i.points||!s)return null;for(let n=0;n<i.points.length-1;n++){const a=new m().copy(i.points[n]),l=new m().copy(i.points[n+1]);e.localToWorld(a),e.localToWorld(l),this.raycaster.set(a,l.clone().sub(a).normalize()),this.raycaster.far=a.distanceTo(l);const c=this.raycaster.intersectObject(t,!0);if(c.length>0){const r=c[0];return{point:r.point,normal:((o=r.face)==null?void 0:o.normal)||new m(0,1,0),penetration:.1,distance:r.distance}}}return null}checkBoxCollision(e,t){const i=e.userData.collisionData.bounds,s=t.userData.collisionData.bounds,o=i.clone().intersect(s);if(o.isEmpty())return null;const n=o.getSize(new m),a=Math.min(n.x,n.y,n.z),l=i.getCenter(new m),c=s.getCenter(new m),r=c.clone().sub(l).normalize();return{point:o.getCenter(new m),normal:r,penetration:a,distance:l.distanceTo(c)}}handleCollision(e,t,i){const s=e.userData.collisionData.id,o=t.userData.collisionData.id,n=this.callbacks.get(s),a=this.callbacks.get(o);n&&n(e,t,i),a&&a(t,e,i),this.defaultCollisionResponse(e,t,i)}defaultCollisionResponse(e,t,i){if(e.userData.collisionData.type==="dynamic"){const s=i.normal.clone().multiplyScalar(-i.penetration);e.position.add(s)}}getCollisionPairId(e,t){const i=e.userData.collisionData.id,s=t.userData.collisionData.id;return i<s?`${i}-${s}`:`${s}-${i}`}registerCollisionCallback(e,t){this.callbacks.set(e,t)}validateTunnelPlacement(e,t){const i={isValid:!0,conflicts:[],warnings:[],suggestions:[]};return t.forEach(s=>{const o=this.checkCollision(e,s);o&&(i.isValid=!1,i.conflicts.push({object:s,collision:o,severity:this.calculateConflictSeverity(o)}))}),i}calculateConflictSeverity(e){const t=e.penetration;return t>2?"critical":t>1?"major":t>.5?"minor":"warning"}detectPathIntersections(e,t){var n,a;const i=((n=e.userData.pathData)==null?void 0:n.points)||[],s=((a=t.userData.pathData)==null?void 0:a.points)||[],o=[];for(let l=0;l<i.length-1;l++)for(let c=0;c<s.length-1;c++){const r=this.lineSegmentIntersection(i[l],i[l+1],s[c],s[c+1]);r&&o.push({point:r,segment1:{start:i[l],end:i[l+1]},segment2:{start:s[c],end:s[c+1]}})}return o}lineSegmentIntersection(e,t,i,s){const o=t.clone().sub(e),n=s.clone().sub(i),a=i.clone().sub(e),l=new m().crossVectors(o,n);if(l.length()<.001)return null;const c=new m().crossVectors(a,n).dot(l)/l.lengthSq(),r=new m().crossVectors(a,o).dot(l)/l.lengthSq();return c>=0&&c<=1&&r>=0&&r<=1?e.clone().add(o.multiplyScalar(c)):null}setupDebugVisualization(){console.log("🎨 Collision debug visualization enabled")}updateDebugVisualization(){this.debugMeshes.forEach(e=>{this.scene.remove(e),e.geometry.dispose(),e.material.dispose()}),this.debugMeshes=[],[...this.staticObjects,...this.dynamicObjects].forEach(e=>{var t,i;if((i=(t=e.userData)==null?void 0:t.collisionData)!=null&&i.bounds){const s=e.userData.collisionData.bounds,o=new et(s,65280);this.scene.add(o),this.debugMeshes.push(o)}}),this.collisionPairs.forEach(e=>{})}dispose(){this.spatialGrid.clear(),this.dynamicObjects.clear(),this.staticObjects.clear(),this.collisionPairs.clear(),this.callbacks.clear(),this.debugMeshes.forEach(e=>{this.scene.remove(e),e.geometry.dispose(),e.material.dispose()}),this.debugMeshes=[]}}class Mt{constructor(e){var t;this.renderer=e,this.isWebGL2=((t=e.capabilities)==null?void 0:t.isWebGL2)||!1,this.shaders=new Map,this.uniformBuffers=new Map,console.log(`🎨 Shader Manager initialized with WebGL${this.isWebGL2?"2":"1"}`),this.initializeShaders()}initializeShaders(){this.createTunnelShader(),this.createRockShader(),this.createMetalShader(),this.createConveyorShader(),this.createDepthBasedFogShader(),this.isWebGL2&&(this.createInstancedShader(),this.createVolumetricShader())}createTunnelShader(){const e=`
            ${this.isWebGL2?"#version 300 es":""}
            ${this.isWebGL2?"in":"attribute"} vec3 position;
            ${this.isWebGL2?"in":"attribute"} vec3 normal;
            ${this.isWebGL2?"in":"attribute"} vec2 uv;
            
            uniform mat4 modelViewMatrix;
            uniform mat4 projectionMatrix;
            uniform mat3 normalMatrix;
            uniform float time;
            uniform vec3 cameraPosition;
            
            ${this.isWebGL2?"out":"varying"} vec3 vNormal;
            ${this.isWebGL2?"out":"varying"} vec2 vUv;
            ${this.isWebGL2?"out":"varying"} vec3 vWorldPosition;
            ${this.isWebGL2?"out":"varying"} vec3 vViewPosition;
            ${this.isWebGL2?"out":"varying"} float vDepth;
            
            void main() {
                vUv = uv;
                vNormal = normalize(normalMatrix * normal);
                
                vec4 worldPosition = modelViewMatrix * vec4(position, 1.0);
                vWorldPosition = worldPosition.xyz;
                vViewPosition = -worldPosition.xyz;
                
                gl_Position = projectionMatrix * worldPosition;
                vDepth = gl_Position.z / gl_Position.w;
                
                // Subtle tunnel wall movement for realism
                vec3 pos = position;
                pos += normal * sin(time * 0.5 + position.x * 0.1) * 0.01;
                
                gl_Position = projectionMatrix * modelViewMatrix * vec4(pos, 1.0);
            }
        `,t=`
            ${this.isWebGL2?"#version 300 es":""}
            precision highp float;
            
            uniform vec3 diffuse;
            uniform float opacity;
            uniform float roughness;
            uniform float metalness;
            uniform float time;
            uniform vec3 cameraPosition;
            uniform sampler2D normalMap;
            uniform sampler2D roughnessMap;
            
            ${this.isWebGL2?"in":"varying"} vec3 vNormal;
            ${this.isWebGL2?"in":"varying"} vec2 vUv;
            ${this.isWebGL2?"in":"varying"} vec3 vWorldPosition;
            ${this.isWebGL2?"in":"varying"} vec3 vViewPosition;
            ${this.isWebGL2?"in":"varying"} float vDepth;
            
            ${this.isWebGL2?"out vec4 fragColor;":""}
            
            // Advanced lighting calculations
            vec3 calculateTunnelLighting(vec3 normal, vec3 viewDir, vec3 lightDir) {
                float NdotL = max(dot(normal, lightDir), 0.0);
                vec3 reflectDir = reflect(-lightDir, normal);
                float specular = pow(max(dot(viewDir, reflectDir), 0.0), 32.0);
                
                // Tunnel-specific ambient occlusion
                float ao = 1.0 - smoothstep(0.0, 2.0, length(vWorldPosition.xz));
                ao = mix(0.3, 1.0, ao);
                
                return diffuse * NdotL * ao + vec3(specular * 0.3);
            }
            
            // Moisture and humidity effects
            vec3 addHumidityEffect(vec3 color, vec3 normal, vec3 viewDir) {
                float humidity = sin(time * 0.3 + vWorldPosition.x * 0.5) * 0.5 + 0.5;
                humidity *= smoothstep(0.5, 1.0, abs(dot(normal, viewDir)));
                
                vec3 moistureColor = vec3(0.1, 0.2, 0.3);
                return mix(color, moistureColor, humidity * 0.2);
            }
            
            void main() {
                vec3 normal = normalize(vNormal);
                vec3 viewDir = normalize(cameraPosition - vWorldPosition);
                vec3 lightDir = normalize(vec3(1.0, 1.0, 0.5));
                
                // Sample normal map for surface detail
                vec3 normalMap = texture${this.isWebGL2?"":"2D"}(normalMap, vUv * 4.0).rgb * 2.0 - 1.0;
                normal = normalize(normal + normalMap * 0.3);
                
                // Calculate base lighting
                vec3 color = calculateTunnelLighting(normal, viewDir, lightDir);
                
                // Add humidity effects
                color = addHumidityEffect(color, normal, viewDir);
                
                // Depth-based fog
                float fogFactor = 1.0 - exp(-abs(vDepth) * 0.1);
                vec3 fogColor = vec3(0.1, 0.1, 0.15);
                color = mix(color, fogColor, fogFactor * 0.6);
                
                // Output
                ${this.isWebGL2?"fragColor":"gl_FragColor"} = vec4(color, opacity);
            }
        `;this.shaders.set("tunnel",{vertexShader:e,fragmentShader:t,uniforms:{diffuse:{value:new F(8421504)},opacity:{value:1},roughness:{value:.8},metalness:{value:.1},time:{value:0},cameraPosition:{value:new m},normalMap:{value:null},roughnessMap:{value:null}}})}createRockShader(){const e=`
            ${this.isWebGL2?"#version 300 es":""}
            ${this.isWebGL2?"in":"attribute"} vec3 position;
            ${this.isWebGL2?"in":"attribute"} vec3 normal;
            ${this.isWebGL2?"in":"attribute"} vec2 uv;
            
            uniform mat4 modelViewMatrix;
            uniform mat4 projectionMatrix;
            uniform mat3 normalMatrix;
            uniform float time;
            
            ${this.isWebGL2?"out":"varying"} vec3 vNormal;
            ${this.isWebGL2?"out":"varying"} vec2 vUv;
            ${this.isWebGL2?"out":"varying"} vec3 vWorldPosition;
            ${this.isWebGL2?"out":"varying"} float vElevation;
            
            // Procedural noise function
            vec3 random3(vec3 c) {
                float j = 4096.0 * sin(dot(c, vec3(17.0, 59.4, 15.0)));
                vec3 r;
                r.z = fract(512.0 * j);
                j *= .125;
                r.x = fract(512.0 * j);
                j *= .125;
                r.y = fract(512.0 * j);
                return r - 0.5;
            }
            
            float simplex3d(vec3 p) {
                const float F3 = 0.3333333;
                const float G3 = 0.1666667;
                
                vec3 s = floor(p + dot(p, vec3(F3)));
                vec3 x = p - s + dot(s, vec3(G3));
                
                vec3 e = step(vec3(0.0), x - x.yzx);
                vec3 i1 = e * (1.0 - e.zxy);
                vec3 i2 = 1.0 - e.zxy * (1.0 - e);
                
                vec3 x1 = x - i1 + G3;
                vec3 x2 = x - i2 + 2.0 * G3;
                vec3 x3 = x - 1.0 + 3.0 * G3;
                
                vec4 w, d;
                
                w.x = dot(x, x);
                w.y = dot(x1, x1);
                w.z = dot(x2, x2);
                w.w = dot(x3, x3);
                
                w = max(0.6 - w, 0.0);
                
                d.x = dot(random3(s), x);
                d.y = dot(random3(s + i1), x1);
                d.z = dot(random3(s + i2), x2);
                d.w = dot(random3(s + 1.0), x3);
                
                w *= w;
                w *= w;
                d *= w;
                
                return dot(d, vec4(52.0));
            }
            
            void main() {
                vUv = uv;
                vNormal = normalize(normalMatrix * normal);
                
                // Add procedural rock displacement
                vec3 pos = position;
                float noise = simplex3d(position * 0.5 + time * 0.1);
                pos += normal * noise * 0.1;
                
                vec4 worldPosition = modelViewMatrix * vec4(pos, 1.0);
                vWorldPosition = worldPosition.xyz;
                vElevation = position.y;
                
                gl_Position = projectionMatrix * worldPosition;
            }
        `,t=`
            ${this.isWebGL2?"#version 300 es":""}
            precision highp float;
            
            uniform vec3 baseColor;
            uniform vec3 accentColor;
            uniform float roughness;
            uniform float time;
            
            ${this.isWebGL2?"in":"varying"} vec3 vNormal;
            ${this.isWebGL2?"in":"varying"} vec2 vUv;
            ${this.isWebGL2?"in":"varying"} vec3 vWorldPosition;
            ${this.isWebGL2?"in":"varying"} float vElevation;
            
            ${this.isWebGL2?"out vec4 fragColor;":""}
            
            vec3 calculateRockColor(vec3 normal, vec2 uv) {
                // Stratified rock layers
                float layers = sin(vElevation * 0.5) * 0.5 + 0.5;
                vec3 layerColor = mix(baseColor, accentColor, layers);
                
                // Weathering effects
                float weathering = pow(abs(dot(normal, vec3(0, 1, 0))), 2.0);
                vec3 weatheredColor = layerColor * 0.7;
                
                return mix(layerColor, weatheredColor, weathering * 0.4);
            }
            
            void main() {
                vec3 normal = normalize(vNormal);
                vec3 color = calculateRockColor(normal, vUv);
                
                // Add subtle brightness variation
                float brightness = 0.8 + 0.2 * sin(vWorldPosition.x * 0.1 + time * 0.5);
                color *= brightness;
                
                ${this.isWebGL2?"fragColor":"gl_FragColor"} = vec4(color, 1.0);
            }
        `;this.shaders.set("rock",{vertexShader:e,fragmentShader:t,uniforms:{baseColor:{value:new F(9127187)},accentColor:{value:new F(6636321)},roughness:{value:.9},time:{value:0}}})}createMetalShader(){const e=`
            ${this.isWebGL2?"#version 300 es":""}
            ${this.isWebGL2?"in":"attribute"} vec3 position;
            ${this.isWebGL2?"in":"attribute"} vec3 normal;
            ${this.isWebGL2?"in":"attribute"} vec2 uv;
            
            uniform mat4 modelViewMatrix;
            uniform mat4 projectionMatrix;
            uniform mat3 normalMatrix;
            
            ${this.isWebGL2?"out":"varying"} vec3 vNormal;
            ${this.isWebGL2?"out":"varying"} vec2 vUv;
            ${this.isWebGL2?"out":"varying"} vec3 vReflect;
            ${this.isWebGL2?"out":"varying"} vec3 vViewPosition;
            
            void main() {
                vUv = uv;
                vNormal = normalize(normalMatrix * normal);
                
                vec4 worldPosition = modelViewMatrix * vec4(position, 1.0);
                vViewPosition = -worldPosition.xyz;
                
                // Calculate reflection vector for environment mapping
                vec3 worldNormal = normalize(mat3(modelViewMatrix) * normal);
                vReflect = reflect(normalize(worldPosition.xyz), worldNormal);
                
                gl_Position = projectionMatrix * worldPosition;
            }
        `,t=`
            ${this.isWebGL2?"#version 300 es":""}
            precision highp float;
            
            uniform vec3 metalColor;
            uniform float metalness;
            uniform float roughness;
            uniform samplerCube envMap;
            uniform float envMapIntensity;
            
            ${this.isWebGL2?"in":"varying"} vec3 vNormal;
            ${this.isWebGL2?"in":"varying"} vec2 vUv;
            ${this.isWebGL2?"in":"varying"} vec3 vReflect;
            ${this.isWebGL2?"in":"varying"} vec3 vViewPosition;
            
            ${this.isWebGL2?"out vec4 fragColor;":""}
            
            void main() {
                vec3 normal = normalize(vNormal);
                vec3 viewDir = normalize(vViewPosition);
                
                // Base metal color
                vec3 baseColor = metalColor;
                
                // Environment reflection
                vec3 reflectVec = reflect(-viewDir, normal);
                vec3 envColor = textureCube(envMap, reflectVec).rgb;
                
                // Fresnel effect
                float fresnel = pow(1.0 - abs(dot(normal, viewDir)), 2.0);
                
                // Combine base color with environment
                vec3 finalColor = mix(baseColor, envColor * envMapIntensity, metalness * fresnel);
                
                // Add subtle surface imperfections
                float imperfection = sin(vUv.x * 100.0) * sin(vUv.y * 100.0) * 0.05 + 0.95;
                finalColor *= imperfection;
                
                ${this.isWebGL2?"fragColor":"gl_FragColor"} = vec4(finalColor, 1.0);
            }
        `;this.shaders.set("metal",{vertexShader:e,fragmentShader:t,uniforms:{metalColor:{value:new F(8947848)},metalness:{value:.9},roughness:{value:.1},envMap:{value:null},envMapIntensity:{value:1}}})}createConveyorShader(){const e=`
            ${this.isWebGL2?"#version 300 es":""}
            ${this.isWebGL2?"in":"attribute"} vec3 position;
            ${this.isWebGL2?"in":"attribute"} vec3 normal;
            ${this.isWebGL2?"in":"attribute"} vec2 uv;
            
            uniform mat4 modelViewMatrix;
            uniform mat4 projectionMatrix;
            uniform mat3 normalMatrix;
            uniform float time;
            uniform float beltSpeed;
            
            ${this.isWebGL2?"out":"varying"} vec3 vNormal;
            ${this.isWebGL2?"out":"varying"} vec2 vUv;
            ${this.isWebGL2?"out":"varying"} vec2 vMovingUv;
            
            void main() {
                vNormal = normalize(normalMatrix * normal);
                vUv = uv;
                
                // Animated UV for moving belt effect
                vMovingUv = uv + vec2(time * beltSpeed, 0.0);
                
                gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);
            }
        `,t=`
            ${this.isWebGL2?"#version 300 es":""}
            precision highp float;
            
            uniform vec3 beltColor;
            uniform float metalness;
            uniform float roughness;
            uniform sampler2D beltTexture;
            
            ${this.isWebGL2?"in":"varying"} vec3 vNormal;
            ${this.isWebGL2?"in":"varying"} vec2 vUv;
            ${this.isWebGL2?"in":"varying"} vec2 vMovingUv;
            
            ${this.isWebGL2?"out vec4 fragColor;":""}
            
            void main() {
                vec3 normal = normalize(vNormal);
                
                // Sample moving belt texture
                vec3 beltPattern = texture${this.isWebGL2?"":"2D"}(beltTexture, vMovingUv).rgb;
                
                // Combine with base color
                vec3 color = beltColor * beltPattern;
                
                // Add belt segmentation lines
                float segments = sin(vMovingUv.x * 20.0) * 0.1 + 0.9;
                color *= segments;
                
                // Simple lighting
                float lighting = max(dot(normal, vec3(0.0, 1.0, 0.5)), 0.3);
                color *= lighting;
                
                ${this.isWebGL2?"fragColor":"gl_FragColor"} = vec4(color, 1.0);
            }
        `;this.shaders.set("conveyor",{vertexShader:e,fragmentShader:t,uniforms:{beltColor:{value:new F(3355443)},metalness:{value:.3},roughness:{value:.7},time:{value:0},beltSpeed:{value:.5},beltTexture:{value:null}}})}createDepthBasedFogShader(){if(!this.isWebGL2)return;this.shaders.set("depthFog",{vertexShader:`
            #version 300 es
            in vec3 position;
            
            uniform mat4 modelViewMatrix;
            uniform mat4 projectionMatrix;
            
            out float vDepth;
            
            void main() {
                vec4 mvPosition = modelViewMatrix * vec4(position, 1.0);
                vDepth = -mvPosition.z;
                gl_Position = projectionMatrix * mvPosition;
            }
        `,fragmentShader:`
            #version 300 es
            precision highp float;
            
            uniform vec3 fogColor;
            uniform float fogNear;
            uniform float fogFar;
            uniform float fogDensity;
            
            in float vDepth;
            out vec4 fragColor;
            
            void main() {
                float fogFactor = 1.0 - exp(-fogDensity * vDepth);
                fogFactor = clamp(fogFactor, 0.0, 1.0);
                
                fragColor = vec4(fogColor, fogFactor);
            }
        `,uniforms:{fogColor:{value:new F(6316128)},fogNear:{value:10},fogFar:{value:100},fogDensity:{value:.02}}})}createInstancedShader(){if(!this.isWebGL2)return;this.shaders.set("instanced",{vertexShader:`
            #version 300 es
            in vec3 position;
            in vec3 normal;
            in vec2 uv;
            in mat4 instanceMatrix;
            in vec3 instanceColor;
            
            uniform mat4 projectionMatrix;
            uniform mat4 viewMatrix;
            uniform mat3 normalMatrix;
            
            out vec3 vNormal;
            out vec2 vUv;
            out vec3 vInstanceColor;
            
            void main() {
                vUv = uv;
                vInstanceColor = instanceColor;
                vNormal = normalize(normalMatrix * normal);
                
                vec4 worldPosition = instanceMatrix * vec4(position, 1.0);
                gl_Position = projectionMatrix * viewMatrix * worldPosition;
            }
        `,fragmentShader:`
            #version 300 es
            precision highp float;
            
            in vec3 vNormal;
            in vec2 vUv;
            in vec3 vInstanceColor;
            
            out vec4 fragColor;
            
            void main() {
                vec3 normal = normalize(vNormal);
                float lighting = max(dot(normal, vec3(0.0, 1.0, 0.5)), 0.3);
                
                vec3 color = vInstanceColor * lighting;
                fragColor = vec4(color, 1.0);
            }
        `,uniforms:{}})}createVolumetricShader(){if(!this.isWebGL2)return;this.shaders.set("volumetric",{vertexShader:`
            #version 300 es
            in vec3 position;
            
            uniform mat4 modelViewMatrix;
            uniform mat4 projectionMatrix;
            
            out vec3 vPosition;
            
            void main() {
                vPosition = position;
                gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);
            }
        `,fragmentShader:`
            #version 300 es
            precision highp float;
            
            uniform sampler3D volumeTexture;
            uniform vec3 cameraPosition;
            uniform float stepSize;
            uniform int maxSteps;
            uniform float opacity;
            
            in vec3 vPosition;
            out vec4 fragColor;
            
            void main() {
                vec3 rayDirection = normalize(vPosition - cameraPosition);
                vec3 rayStart = vPosition;
                
                vec4 color = vec4(0.0);
                
                for (int i = 0; i < maxSteps; i++) {
                    vec3 samplePos = rayStart + rayDirection * float(i) * stepSize;
                    
                    // Sample 3D texture
                    vec4 sample = texture(volumeTexture, samplePos * 0.5 + 0.5);
                    
                    // Alpha blending
                    color.rgb += sample.rgb * sample.a * (1.0 - color.a);
                    color.a += sample.a * (1.0 - color.a);
                    
                    if (color.a > 0.95) break;
                }
                
                fragColor = vec4(color.rgb, color.a * opacity);
            }
        `,uniforms:{volumeTexture:{value:null},cameraPosition:{value:new m},stepSize:{value:.1},maxSteps:{value:64},opacity:{value:1}}})}createMaterial(e,t={}){const i=this.shaders.get(e);if(!i)return console.warn(`Shader '${e}' not found`),new B;const s=tt.merge([i.uniforms,t]);return new it({vertexShader:i.vertexShader,fragmentShader:i.fragmentShader,uniforms:s,transparent:!0,side:Se})}updateShaderUniforms(e,t){this.shaders.forEach((i,s)=>{i.uniforms.time&&(i.uniforms.time.value=e),i.uniforms.cameraPosition&&i.uniforms.cameraPosition.value.copy(t.position)})}getAvailableShaders(){return Array.from(this.shaders.keys())}dispose(){this.shaders.clear(),this.uniformBuffers.clear()}}class St{constructor(e={}){this.options={enableGPUTiming:!0,enableMemoryMonitoring:!0,enableFrameAnalysis:!0,sampleSize:60,alertThresholds:{fps:30,memoryMB:500,drawCalls:1e3},...e},this.metrics={fps:0,frameTime:0,drawCalls:0,triangles:0,memoryMB:0,gpuTime:0},this.samples={frameTimes:[],drawCalls:[],memoryUsage:[]},this.callbacks=new Set,this.isMonitoring=!1,this.gpuTimer=null,this.gpuQueries=[],this.init()}init(){this.options.enableGPUTiming&&this.initGPUTiming(),console.log("📊 Performance Monitor initialized")}initGPUTiming(){console.log("⏱️ GPU timing monitoring initialized")}startMonitoring(e){this.renderer=e,this.isMonitoring=!0,this.lastTime=performance.now(),this.frameCount=0,console.log("📊 Performance monitoring started")}stopMonitoring(){this.isMonitoring=!1,console.log("📊 Performance monitoring stopped")}update(){if(!this.isMonitoring)return;const e=performance.now(),t=e-this.lastTime;this.frameCount++,this.updateFrameMetrics(t),this.renderer&&this.updateRenderMetrics(),this.options.enableMemoryMonitoring&&this.updateMemoryMetrics(),this.checkThresholds(),this.lastTime=e}updateFrameMetrics(e){if(this.samples.frameTimes.push(e),this.samples.frameTimes.length>this.options.sampleSize&&this.samples.frameTimes.shift(),this.samples.frameTimes.length>0){const t=this.samples.frameTimes.reduce((i,s)=>i+s)/this.samples.frameTimes.length;this.metrics.fps=Math.round(1e3/t),this.metrics.frameTime=t}}updateRenderMetrics(){const e=this.renderer.info;this.metrics.drawCalls=e.render.calls,this.metrics.triangles=e.render.triangles,this.samples.drawCalls.push(e.render.calls),this.samples.drawCalls.length>this.options.sampleSize&&this.samples.drawCalls.shift()}updateMemoryMetrics(){if(this.renderer){const e=this.renderer.info,t=(e.memory.geometries+e.memory.textures)*.001;this.metrics.memoryMB=t,this.samples.memoryUsage.push(t),this.samples.memoryUsage.length>this.options.sampleSize&&this.samples.memoryUsage.shift()}performance.memory&&(this.metrics.jsHeapMB=performance.memory.usedJSHeapSize/(1024*1024))}checkThresholds(){const e=[];this.metrics.fps<this.options.alertThresholds.fps&&e.push({type:"fps",message:`Low FPS detected: ${this.metrics.fps}`,severity:"warning"}),this.metrics.memoryMB>this.options.alertThresholds.memoryMB&&e.push({type:"memory",message:`High memory usage: ${this.metrics.memoryMB.toFixed(1)}MB`,severity:"warning"}),this.metrics.drawCalls>this.options.alertThresholds.drawCalls&&e.push({type:"drawCalls",message:`High draw calls: ${this.metrics.drawCalls}`,severity:"info"}),e.length>0&&this.triggerCallbacks("alert",e)}getMetrics(){return{...this.metrics}}getDetailedReport(){return{metrics:this.getMetrics(),samples:{frameTimes:[...this.samples.frameTimes],drawCalls:[...this.samples.drawCalls],memoryUsage:[...this.samples.memoryUsage]},analysis:this.analyzePerformance()}}analyzePerformance(){const e={overallScore:"good",bottlenecks:[],recommendations:[]};this.samples.frameTimes.length>10&&this.calculateVariance(this.samples.frameTimes)>5&&(e.bottlenecks.push("Frame time instability"),e.recommendations.push("Consider reducing scene complexity or enabling LOD")),this.samples.drawCalls.reduce((s,o)=>s+o,0)/this.samples.drawCalls.length>100&&(e.bottlenecks.push("High draw call count"),e.recommendations.push("Consider object instancing or batching")),this.samples.memoryUsage.length>30&&this.calculateTrend(this.samples.memoryUsage)>.1&&(e.bottlenecks.push("Memory usage increasing"),e.recommendations.push("Check for memory leaks in geometry/texture disposal"));let i=100;return this.metrics.fps<30&&(i-=30),this.metrics.memoryMB>200&&(i-=20),this.metrics.drawCalls>500&&(i-=20),i>80?e.overallScore="excellent":i>60?e.overallScore="good":i>40?e.overallScore="fair":e.overallScore="poor",e}calculateVariance(e){const t=e.reduce((s,o)=>s+o)/e.length,i=e.reduce((s,o)=>s+Math.pow(o-t,2),0)/e.length;return Math.sqrt(i)}calculateTrend(e){if(e.length<2)return 0;const t=e.slice(0,Math.floor(e.length/2)),i=e.slice(Math.floor(e.length/2)),s=t.reduce((n,a)=>n+a)/t.length;return(i.reduce((n,a)=>n+a)/i.length-s)/s}suggestOptimizations(){const e=[];return this.analyzePerformance(),this.metrics.fps<30&&(e.push({type:"performance",priority:"high",message:"Enable WebGL2 LOD system for distant objects",action:"enableLOD"}),e.push({type:"performance",priority:"medium",message:"Reduce shadow map resolution",action:"reduceShadowQuality"})),this.metrics.drawCalls>100&&e.push({type:"optimization",priority:"medium",message:"Use instanced rendering for repeated objects",action:"enableInstancing"}),this.metrics.memoryMB>200&&e.push({type:"memory",priority:"high",message:"Implement texture compression",action:"compressTextures"}),e}onAlert(e){this.callbacks.add(e)}offAlert(e){this.callbacks.delete(e)}triggerCallbacks(e,t){this.callbacks.forEach(i=>{try{i(e,t)}catch(s){console.error("Performance monitor callback error:",s)}})}enableAutoOptimization(){this.autoOptimization=!0,setInterval(()=>{this.metrics.fps<20&&this.triggerCallbacks("autoOptimize",{action:"reduceQuality",reason:"Low FPS detected"})},5e3)}runBenchmark(e=1e4){return new Promise(t=>{performance.now();const i={...this.metrics};setTimeout(()=>{const s={...this.metrics},o={duration:e,startMetrics:i,endMetrics:s,avgFPS:this.metrics.fps,minFPS:Math.min(...this.samples.frameTimes.map(n=>1e3/n)),maxFPS:Math.max(...this.samples.frameTimes.map(n=>1e3/n)),stability:100-this.calculateVariance(this.samples.frameTimes),score:this.analyzePerformance().overallScore};t(o)},e)})}dispose(){this.stopMonitoring(),this.callbacks.clear(),this.samples={frameTimes:[],drawCalls:[],memoryUsage:[]}}}class Dt{constructor(e,t,i,s=null){this.scene=e,this.camera=t,this.renderer=i,this.viewer=s,this.isCreating=!1,this.previewObject=null,this.currentType="tunnel",this.currentPosition=new m(0,-2,0),this.parameters={tunnel:{width:3,height:3,length:10,orientation:"horizontal",angle:0},road:{width:4,height:.5,length:15,orientation:"horizontal",angle:0},rail:{width:1.5,height:.3,length:20,orientation:"horizontal",angle:0},conveyor:{width:1,height:.8,length:12,orientation:"horizontal",angle:0}},this.createdObjects=new Map,this.nextId=1,this.autoMultiPlace=!1}startCreating(e){this.isCreating=!0,this.currentType=e,this.showCreationUI(),this.createPreview(),console.log(`[MineObjectCreator] Started creating: ${e}`)}stopCreating(){this.isCreating=!1,this.hideCreationUI(),this.removePreview(),console.log("[MineObjectCreator] Stopped creating")}updateParameter(e,t){this.parameters[this.currentType]&&(e==="orientation"?this.parameters[this.currentType][e]=t:this.parameters[this.currentType][e]=parseFloat(t),this.updatePreview(),console.log(`[MineObjectCreator] Updated ${e}: ${t}`))}createPreview(){this.removePreview();const e=this.parameters[this.currentType],t=this.createGeometry(this.currentType,e),i=this.createPreviewMaterial(this.currentType);this.previewObject=new u(t,i),this.previewObject.position.copy(this.currentPosition),this.previewObject.name="preview_object",this.scene.add(this.previewObject)}updatePreview(){if(this.previewObject){const e=this.parameters[this.currentType],t=this.createGeometry(this.currentType,e);this.previewObject.geometry.dispose(),this.previewObject.geometry=t}}removePreview(){this.previewObject&&(this.scene.remove(this.previewObject),this.previewObject.geometry.dispose(),this.previewObject.material.dispose(),this.previewObject=null)}createGeometry(e,t){let i;switch(t&&t.orientation&&(t.orientation==="yatay"?t.orientation="horizontal":t.orientation==="dikey"&&(t.orientation="vertical")),e){case"tunnel":t.orientation==="vertical"?(i=new T(t.width/2,t.width/2,t.length,16,1,!1),t.angle&&t.angle!==0&&i.rotateY(t.angle*Math.PI/180)):(i=new T(t.height/2,t.height/2,t.length,16,1,!1),t.angle&&t.angle!==0&&i.rotateY(t.angle*Math.PI/180),i.rotateX(Math.PI/2),i.scale(t.width/t.height,1,1));break;case"road":i=new C(t.width,t.height,t.length);break;case"rail":i=new C(t.width,t.height,t.length);break;case"conveyor":i=new C(t.width,t.height,t.length);break;default:i=new C(2,2,2)}return e!=="tunnel"&&t.angle&&t.angle!==0&&(t.orientation==="vertical"?i.rotateY(t.angle*Math.PI/180):i.rotateZ(t.angle*Math.PI/180)),i}createPreviewMaterial(e){const t={tunnel:8421504,road:4210752,rail:6710886,conveyor:16766720};return new H({color:t[e]||8421504,transparent:!0,opacity:.6,wireframe:!1})}finalizeCreation(){var o;if(!this.previewObject)return null;const e=this.parameters[this.currentType],t=this.createGeometry(this.currentType,e),i=this.createFinalMaterial(this.currentType),s=new u(t,i);if(s.position.copy(this.previewObject.position),s.userData={id:this.nextId++,type:this.currentType,parameters:{...e},selectable:!0},this.viewer&&this.viewer.collisionSystem){const n=Array.from(this.createdObjects.values()),a=this.viewer.collisionSystem.validateTunnelPlacement(s,n);if(!a.isValid){const c=`⚠️ Placement conflict detected!
${a.conflicts.length} collision(s) found.`;if(!confirm(`${c}

Do you want to place anyway?`))return s.geometry.dispose(),s.material.dispose(),null}}if(this.scene.add(s),this.createdObjects.set(s.userData.id,s),this.viewer&&this.viewer.collisionSystem&&this.viewer.collisionSystem.registerObject(s,"static",{type:this.currentType,creator:"MineObjectCreator",parameters:e}),this.viewer&&this.viewer.objectSelector)try{this.viewer.objectSelector.addSelectableObject(s,{id:s.userData.id,type:s.userData.type,name:`${s.userData.type.charAt(0).toUpperCase()+s.userData.type.slice(1)} ${s.userData.id}`,parameters:s.userData.parameters,color:"#"+s.material.color.getHexString()})}catch(n){console.warn("[MineObjectCreator] Selectable eklenemedi:",n)}if(this.removePreview(),console.log(`[MineObjectCreator] Created ${this.currentType} with ID: ${s.userData.id}`),this.autoMultiPlace)this.createPreview();else if(this.isCreating=!1,(o=this.hideCreationUI)==null||o.call(this),this.viewer&&(this.viewer.isCreatingMode=!1,typeof this.viewer.removePreview=="function"))try{this.viewer.removePreview()}catch{}return s}createFinalMaterial(e){const t={tunnel:8421504,road:4210752,rail:6710886,conveyor:16766720};return new H({color:t[e]||8421504,transparent:!1,opacity:1})}showCreationUI(){let e=document.getElementById("creation-panel");e||(e=this.createCreationPanel()),e.style.display="block",this.updateUIForType(this.currentType)}hideCreationUI(){const e=document.getElementById("creation-panel");e&&(e.style.display="none")}createCreationPanel(){const e=document.createElement("div");return e.id="creation-panel",e.className="creation-panel",e.style.cssText=`
            position: fixed;
            top: 20px;
            right: 20px;
            background: rgba(0,0,0,0.8);
            color: white;
            padding: 20px;
            border-radius: 10px;
            min-width: 280px;
            z-index: 1000;
            display: none;
            font-family: Arial, sans-serif;
        `,e.innerHTML=`
            <h4 id="creation-title" style="margin-top: 0; color: #fff;">Tünel Oluştur</h4>
            
            <div class="parameter-group" style="margin-bottom: 15px;">
                <label for="param1" style="display: block; margin-bottom: 5px;">
                    Genişlik: <span id="param1-value" style="color: #4CAF50; font-weight: bold;">3</span>m
                </label>
                <input type="range" id="param1" min="1" max="10" step="0.5" value="3" 
                       style="width: 100%; margin-bottom: 5px;">
                <input type="number" id="param1-number" min="1" max="10" step="0.5" value="3"
                       style="width: 100%; padding: 4px; margin-bottom: 10px; background: #333; color: white; border: 1px solid #555; border-radius: 3px;">
                
                <label for="param2" style="display: block; margin-bottom: 5px;">
                    Yükseklik: <span id="param2-value" style="color: #4CAF50; font-weight: bold;">3</span>m
                </label>
                <input type="range" id="param2" min="1" max="8" step="0.5" value="3"
                       style="width: 100%; margin-bottom: 5px;">
                <input type="number" id="param2-number" min="1" max="8" step="0.5" value="3"
                       style="width: 100%; padding: 4px; margin-bottom: 10px; background: #333; color: white; border: 1px solid #555; border-radius: 3px;">
                
                <label for="param3" style="display: block; margin-bottom: 5px;">
                    Uzunluk: <span id="param3-value" style="color: #4CAF50; font-weight: bold;">10</span>m
                </label>
                <input type="range" id="param3" min="5" max="5000" step="1" value="10"
                       style="width: 100%; margin-bottom: 5px;">
                <input type="number" id="param3-number" min="5" max="5000" step="1" value="10"
                       style="width: 100%; padding: 4px; margin-bottom: 15px; background: #333; color: white; border: 1px solid #555; border-radius: 3px;">
            </div>
            
            <div id="tunnel-controls" class="tunnel-specific" style="margin-bottom: 15px; border-top: 1px solid #444; padding-top: 15px;">
                <label for="orientation" style="display: block; margin-bottom: 5px;">
                    Yönelim:
                </label>
                <select id="orientation" style="width: 100%; padding: 5px; margin-bottom: 10px; background: #333; color: white; border: 1px solid #555;">
                    <option value="horizontal">Yatay</option>
                    <option value="vertical">Dikey</option>
                </select>
                
                <label for="angle" style="display: block; margin-bottom: 5px;">
                    Açı: <span id="angle-value" style="color: #4CAF50; font-weight: bold;">0</span>°
                </label>
                <input type="range" id="angle" min="0" max="360" step="5" value="0"
                       style="width: 100%; margin-bottom: 10px;">
            </div>
            
            <div class="button-group" style="margin-top: 15px;">
                <button id="create-confirm" class="btn btn-success" 
                        style="background: #4CAF50; color: white; border: none; padding: 8px 16px; border-radius: 4px; margin-right: 10px; cursor: pointer;">
                    Oluştur
                </button>
                <button id="create-cancel" class="btn btn-secondary"
                        style="background: #666; color: white; border: none; padding: 8px 16px; border-radius: 4px; cursor: pointer;">
                    İptal
                </button>
            </div>
        `,document.body.appendChild(e),this.setupCreationPanelEvents(),e}setupCreationPanelEvents(){const e=document.getElementById("param1"),t=document.getElementById("param2"),i=document.getElementById("param3"),s=document.getElementById("param1-number"),o=document.getElementById("param2-number"),n=document.getElementById("param3-number"),a=document.getElementById("orientation"),l=document.getElementById("angle"),c=document.getElementById("create-confirm"),r=document.getElementById("create-cancel");e.addEventListener("input",d=>{const h=d.target.value;document.getElementById("param1-value").textContent=h,s.value=h,this.updateParameter("width",h)}),t.addEventListener("input",d=>{const h=d.target.value;document.getElementById("param2-value").textContent=h,o.value=h,this.updateParameter("height",h)}),i.addEventListener("input",d=>{const h=d.target.value;document.getElementById("param3-value").textContent=h,n.value=h,this.updateParameter("length",h)}),s.addEventListener("input",d=>{const h=d.target.value;document.getElementById("param1-value").textContent=h,e.value=h,this.updateParameter("width",h)}),o.addEventListener("input",d=>{const h=d.target.value;document.getElementById("param2-value").textContent=h,t.value=h,this.updateParameter("height",h)}),n.addEventListener("input",d=>{const h=d.target.value;document.getElementById("param3-value").textContent=h,i.value=h,this.updateParameter("length",h)}),a.addEventListener("change",d=>{this.updateParameter("orientation",d.target.value)}),l.addEventListener("input",d=>{document.getElementById("angle-value").textContent=d.target.value,this.updateParameter("angle",d.target.value)}),c.addEventListener("click",()=>{const d=this.finalizeCreation();d&&(this.stopCreating(),this.viewer&&this.viewer.saveObjectToServer(d))}),r.addEventListener("click",()=>{this.stopCreating()})}updateUIForType(e){const t={tunnel:"Tünel Oluştur",road:"Yol Oluştur",rail:"Ray Oluştur",conveyor:"Konveyör Oluştur"};document.getElementById("creation-title").textContent=t[e]||"Obje Oluştur";const i=this.parameters[e];document.getElementById("param1").value=i.width,document.getElementById("param1-value").textContent=i.width,document.getElementById("param1-number").value=i.width,document.getElementById("param2").value=i.height,document.getElementById("param2-value").textContent=i.height,document.getElementById("param2-number").value=i.height,document.getElementById("param3").value=i.length,document.getElementById("param3-value").textContent=i.length,document.getElementById("param3-number").value=i.length;const s=document.getElementById("tunnel-controls");e==="tunnel"?(s.style.display="block",document.getElementById("orientation").value=i.orientation||"horizontal",document.getElementById("angle").value=i.angle||0,document.getElementById("angle-value").textContent=i.angle||0):s.style.display="none"}async saveToServer(e){var t,i,s;try{const o={mine_id:this.mineId||1,name:`${e.userData.type.charAt(0).toUpperCase()+e.userData.type.slice(1)} ${e.userData.id}`,type:"model",geometry:{type:e.userData.type,...e.userData.parameters},material:{color:e.material.color.getHex(),opacity:e.material.opacity||1},position:[e.position.x,e.position.y,e.position.z],rotation:[e.rotation.x,e.rotation.y,e.rotation.z],scale:[e.scale.x,e.scale.y,e.scale.z],properties:{createdAt:new Date().toISOString(),tool:e.userData.type},visible:!0,order:e.userData.id},n=await fetch(`/api/mines/${this.mineId||1}/models`,{method:"POST",headers:{"Content-Type":"application/json","X-CSRF-TOKEN":((t=document.querySelector('meta[name="csrf-token"]'))==null?void 0:t.getAttribute("content"))||"",Accept:"application/json"},body:JSON.stringify(o)});if(n.ok){const a=await n.json();e.userData.serverId=(i=a.data)==null?void 0:i.id,console.log("[MineObjectCreator] Successfully saved to server:",a)}else throw new Error(`HTTP ${n.status}: ${n.statusText}`)}catch(o){console.error("[MineObjectCreator] Error saving to server:",o),(s=this.showError)==null||s.call(this,"Obje kaydedilemedi: "+o.message)}}showError(e){const t=document.createElement("div");t.style.cssText=`
            position: fixed;
            top: 20px;
            left: 50%;
            transform: translateX(-50%);
            background: #ff4444;
            color: white;
            padding: 10px 20px;
            border-radius: 5px;
            z-index: 10000;
        `,t.textContent=e,document.body.appendChild(t),setTimeout(()=>{document.body.removeChild(t)},3e3)}}class Pt{constructor(e,t,i){this.scene=e,this.camera=t,this.renderer=i,this.isDrawing=!1,this.currentPath=[],this.tempPath=null,this.paths=new Map,this.raycaster=new N,this.mouse=new q,this.groundPlane=new De(new m(0,1,0),-2),this.tunnelConstraintMode=!1,this.constraintTunnel=null,this.currentDrawingType="tunnel",this.previewMesh=null,this.distanceLabel=null,this.drawingCallbacks={onPathStart:null,onPathUpdate:null,onPathComplete:null},this._lodFrame=0,this.debug=!1}startDrawing(e={}){this.stopDrawing(),this.isDrawing=!0,this.currentPath=[],this.drawingCallbacks={...this.drawingCallbacks,...e},console.log("[MinePathDrawer] Yol çizimi başladı - state temizlendi, type:",this.currentDrawingType)}setDrawingType(e){this.currentDrawingType=e,console.log("[MinePathDrawer] Drawing type set to:",e)}setAxisConstraint(e){this.axisConstraint=e,console.log("[MinePathDrawer] Axis constraint set to:",e)}stopDrawing(){this.isDrawing=!1,this.currentPath=[],this.removeTempPath(),this.removePreviewMesh(),this.removeDistanceLabel(),console.log("[MinePathDrawer] Yol çizimi durdu - temizlik yapıldı")}handleClick(e){if(!this.isDrawing)return;this.updateMousePosition(e);const t=this.getGroundIntersection();t&&(this.currentPath.push(t),this.updateTempPath(),this.drawingCallbacks.onPathUpdate&&this.drawingCallbacks.onPathUpdate(this.currentPath))}handleMouseMove(e){if(!this.isDrawing||this.currentPath.length===0)return;this.updateMousePosition(e);let t=this.getGroundIntersection();if(t){if(this.axisConstraint&&this.currentPath.length>0){const s=this.currentPath[this.currentPath.length-1];switch(this.axisConstraint){case"x":t.y=s.y,t.z=s.z;break;case"y":t.x=s.x,t.z=s.z;break;case"z":t.x=s.x,t.y=s.y;break}}this.viewer.constrainToAxis&&(t=this.viewer.constrainToAxis(t)),this.updatePreview(t);const i=[...this.currentPath,t];this.updateTempPath(i)}}updateMousePosition(e){const t=this.renderer.domElement.getBoundingClientRect();this.mouse.x=(e.clientX-t.left)/t.width*2-1,this.mouse.y=-((e.clientY-t.top)/t.height)*2+1}getGroundIntersection(){this.raycaster.setFromCamera(this.mouse,this.camera);const e=new m;if(this.tunnelConstraintMode&&this.constraintTunnel){const t=this.raycaster.intersectObject(this.constraintTunnel,!0);if(t.length>0){const i=t[0].point;return i.y=-2.5,this.debug&&console.log("[MinePathDrawer] Tunnel constraint intersection found:",{x:i.x.toFixed(2),y:i.y.toFixed(2),z:i.z.toFixed(2)}),i}else return this.debug&&console.log("[MinePathDrawer] No tunnel constraint intersection found"),null}else return this.raycaster.ray.intersectPlane(this.groundPlane,e)?(this.debug&&console.log("[MinePathDrawer] Ground intersection found:",{x:e.x.toFixed(2),y:e.y.toFixed(2),z:e.z.toFixed(2)}),e):(this.debug&&console.log("[MinePathDrawer] No ground intersection found"),null)}updateTempPath(e=null){this.removeTempPath();const t=e||this.currentPath;if(t.length<2)return;const i=new ie().setFromPoints(t),s=new U({color:16711680,linewidth:3,opacity:.8,transparent:!0});this.tempPath=new L(i,s),this.scene.add(this.tempPath)}removeTempPath(){this.tempPath&&(console.log("[MinePathDrawer] Removing temp path"),this.scene.remove(this.tempPath),this.tempPath.geometry.dispose(),this.tempPath.material.dispose(),this.tempPath=null)}completePath(){if(this.currentPath.length<2)return console.log("[MinePathDrawer] Complete path failed: not enough points"),null;console.log("[MinePathDrawer] Completing path with",this.currentPath.length,"points"),this.removeTempPath(),this.drawingCallbacks.onPathComplete&&this.drawingCallbacks.onPathComplete(this.currentPath);const e=[...this.currentPath];return this.currentPath=[],e}createPath(e){const{id:t,points:i,width:s=2.5,height:o=2.5,color:n="#808080",type:a="tunnel"}=e;if(!i||i.length<2)return null;const l=this.createPathMesh(i,s,o,n,a);if(l.userData={id:t,type:a,pathData:e},this.viewer&&this.viewer.collisionSystem){const c=Array.from(this.paths.values());let r=!1;c.forEach(d=>{var g;const h=this.viewer.collisionSystem.detectPathIntersections(l,d);h.length>0&&(r=!0,console.warn(`⚠️ Path intersection detected with path ${d.userData.id}:`,h),(g=this.viewer.options)!=null&&g.debugCollisions&&h.forEach(p=>{const w=new u(new Me(.2),new B({color:16711680}));w.position.copy(p.point),this.scene.add(w),setTimeout(()=>this.scene.remove(w),5e3)}))}),r&&console.log(`⚠️ Path ${t} has intersections with existing paths`),this.viewer.collisionSystem.registerObject(l,"static",{type:"path",pathType:a,points:i,width:s,height:o})}return this.paths.set(t,l),this.scene.add(l),console.log(`[MinePathDrawer] Yol oluşturuldu: ${t}, boyutlar: ${s}x${o}`),l}createPathMesh(e,t,i,s,o){const n=new We,a=this.createTubeGeometry(e,t,i),l=this.createPathMaterial(s,o),c=new u(a,l);c.castShadow=!0,c.receiveShadow=!0;const r=this.createTubeGeometry(e,t,i,{quality:"low"});c.userData.highGeometry=a,c.userData.lowGeometry=r,c.userData.lodState="high",n.add(c);const d=new Re(a),h=new U({color:new F(s).multiplyScalar(.5),opacity:.6,transparent:!0,linewidth:1}),g=new He(d,h);return n.add(g),o==="conveyor"?this.addConveyorBelt(n,e,t):o==="rail"&&this.addRailTracks(n,e,t),n}createPathMaterial(e,t){const i=new F(e);switch(t){case"tunnel":return new H({color:i,transparent:!0,opacity:.9,shininess:30,specular:4473924});case"road":return new me({color:i.multiplyScalar(.7),transparent:!0,opacity:.95});case"rail":return new H({color:i,metalness:.7,roughness:.3,transparent:!0,opacity:.9});case"conveyor":return new H({color:i,transparent:!0,opacity:.8,shininess:50,specular:8947848});default:return new me({color:i,transparent:!0,opacity:.9})}}createTubeGeometry(e,t,i,s={}){if(e.length<2)return new C(1,1,1);const o=new Y(e);o.tension=.2;const n=Math.max(e.length*6,24);let a=n;s.quality==="low"&&(a=Math.max(Math.floor(n*.35),8)),a=Math.min(a,360);const l=s.quality==="low"?8:16,c=new Q(o,a,Math.max(t,i)/2,l,!1),r=c.attributes.position.array;for(let d=0;d<r.length;d+=3){const h=r[d],g=r[d+1],p=r[d+2];if(Math.sqrt(h*h+p*p)>0){const S=Math.atan2(p,h),x=t*i/Math.sqrt((i*Math.cos(S))**2+(t*Math.sin(S))**2)/(Math.max(t,i)/2);r[d]=h*x,r[d+2]=p*x,g<0&&(r[d+1]=g*.8)}}return c.attributes.position.needsUpdate=!0,c.computeVertexNormals(),c}updateLOD(){if(this._lodFrame++,this._lodFrame%10===0)for(const[,e]of this.paths){if(!e)continue;const t=e.children.find(n=>n.isMesh);if(!t||!t.userData.highGeometry)continue;t.userData._bs||(t.userData.highGeometry.computeBoundingSphere(),t.userData._bs=t.userData.highGeometry.boundingSphere.clone());const i=t.userData._bs.center.clone();e.localToWorld(i);const o=i.distanceTo(this.camera.position)>180?"low":"high";o!==t.userData.lodState&&(o==="low"?(t.geometry=t.userData.lowGeometry,t.userData.lodState="low"):(t.geometry=t.userData.highGeometry,t.userData.lodState="high"))}}addConveyorBelt(e,t,i){const s=new Y(t),o=new Q(s,t.length*2,i/3,8,!1),n=new H({color:3355443,shininess:100,transparent:!0,opacity:.8}),a=new u(o,n);a.position.y+=.1,e.add(a)}addRailTracks(e,t,i){const s=new Y(t),o=new Q(s,t.length*4,.05,6,!1),n=new H({color:6710886,metalness:.8,roughness:.2}),a=new u(o,n.clone());a.position.x-=i/3,a.position.y+=.05,e.add(a);const l=new u(o.clone(),n.clone());l.position.x+=i/3,l.position.y+=.05,e.add(l)}removePath(e){const t=this.paths.get(e);t&&(this.scene.remove(t),t.traverse(i=>{i.geometry&&i.geometry.dispose(),i.material&&(Array.isArray(i.material)?i.material.forEach(s=>s.dispose()):i.material.dispose())}),this.paths.delete(e),console.log(`[MinePathDrawer] Yol silindi: ${e}`))}clearAllPaths(){for(const[e,t]of this.paths)this.removePath(e);console.log("[MinePathDrawer] Tüm yollar silindi")}getPath(e){return this.paths.get(e)}getAllPaths(){return Array.from(this.paths.values())}calculatePathLength(e){if(!e||e.length<2)return 0;let t=0;for(let i=1;i<e.length;i++){const s=e[i-1],o=e[i],n=o.x-s.x,a=o.y-s.y,l=o.z-s.z;t+=Math.sqrt(n*n+a*a+l*l)}return t}enableTunnelConstraint(e){this.tunnelConstraintMode=!0,this.constraintTunnel=e,console.log("[MinePathDrawer] Tunnel constraint mode enabled")}disableTunnelConstraint(){this.tunnelConstraintMode=!1,this.constraintTunnel=null,console.log("[MinePathDrawer] Tunnel constraint mode disabled")}updatePreview(e){if(!this.isDrawing||this.currentPath.length===0)return;const t=[...this.currentPath,e];this.createPreviewMesh(t),this.updateDistanceLabel(e)}createPreviewMesh(e){if(this.removePreviewMesh(),e.length<2)return;let t,i;switch(this.currentDrawingType){case"tunnel":t=this.createTubeGeometry(e,2.5,2.5),i=new B({color:6710886,transparent:!0,opacity:.3,wireframe:!0});break;case"road":t=this.createRoadGeometry(e,3),i=new B({color:3355443,transparent:!0,opacity:.4});break;case"rail":t=this.createRailGeometry(e,1.5),i=new B({color:6710886,transparent:!0,opacity:.5});break;case"conveyor":t=this.createConveyorGeometry(e,1),i=new B({color:4473924,transparent:!0,opacity:.4});break;default:t=new ie().setFromPoints(e),i=new U({color:16711680,transparent:!0,opacity:.7})}this.currentDrawingType==="tunnel"||this.currentDrawingType==="road"||this.currentDrawingType==="rail"||this.currentDrawingType==="conveyor"?this.previewMesh=new u(t,i):this.previewMesh=new L(t,i),this.scene.add(this.previewMesh)}removePreviewMesh(){this.previewMesh&&(this.scene.remove(this.previewMesh),this.previewMesh.geometry&&this.previewMesh.geometry.dispose(),this.previewMesh.material&&this.previewMesh.material.dispose(),this.previewMesh=null)}updateDistanceLabel(e){if(this.currentPath.length===0)return;const i=this.currentPath[this.currentPath.length-1].distanceTo(e);this.updateDistanceDisplay(i)}updateDistanceDisplay(e){const t=document.getElementById("distance-display"),i=document.getElementById("distance-value");t&&i&&(t.style.display="block",i.textContent=`${e.toFixed(1)}m`)}removeDistanceLabel(){const e=document.getElementById("distance-display");e&&(e.style.display="none")}createRoadGeometry(e,t){const i=new Y(e);return new Q(i,e.length*2,t/2,8,!1)}createRailGeometry(e,t){const i=new Y(e);return new Q(i,e.length*2,.1,6,!1)}createConveyorGeometry(e,t){const i=new Y(e);return new Q(i,e.length*2,t/2,6,!1)}}class Et{constructor(e,t,i,s){this.scene=e,this.camera=t,this.renderer=i,this.pathDrawer=s,this.raycaster=new N,this.mouse=new q,this.isEditing=!1,this.activePath=null,this.handles=[],this.draggingHandle=null,this.dragPlane=new De(new m(0,1,0),0),this.offset=new m,this.intersection=new m,this.callbacks={onPointChange:null,onEditStart:null,onEditEnd:null},this.undoStack=[],this.redoStack=[],this.maxHistory=50}setCallbacks(e){this.callbacks={...this.callbacks,...e}}startEditing(e){if(!e||!e.userData||!e.userData.pathData)return;this.stopEditing(),this.isEditing=!0,this.activePath=e;const t=e.userData.pathData,i=(t.points||t.path_points||[]).map(o=>({...o}));this.undoStack=[i],this.redoStack=[],this.buildHandles(),this.callbacks.onEditStart&&this.callbacks.onEditStart(e);const s=document.getElementById("save-path-btn");s&&(s.disabled=!1)}stopEditing(){this.clearHandles(),this.isEditing=!1,this.activePath=null,this.draggingHandle=null,this.callbacks.onEditEnd&&this.callbacks.onEditEnd();const e=document.getElementById("save-path-btn");e&&(e.disabled=!0)}buildHandles(){this.clearHandles();const e=this.activePath.userData.pathData,t=e.points||e.path_points||[],i=new Me(.6,12,12),s=new B({color:16763904});t.forEach((o,n)=>{const a=new u(i.clone(),s.clone());a.position.set(o.x,o.y,o.z),a.userData.isPathHandle=!0,a.userData.pointIndex=n,this.scene.add(a),this.handles.push({mesh:a,index:n})})}clearHandles(){this.handles.forEach(e=>{this.scene.remove(e.mesh),e.mesh.geometry.dispose(),e.mesh.material.dispose()}),this.handles=[]}updateMouse(e){const t=this.renderer.domElement.getBoundingClientRect();this.mouse.x=(e.clientX-t.left)/t.width*2-1,this.mouse.y=-((e.clientY-t.top)/t.height)*2+1}pointerDown(e){if(!this.isEditing)return;this.updateMouse(e),this.raycaster.setFromCamera(this.mouse,this.camera);const t=this.raycaster.intersectObjects(this.handles.map(i=>i.mesh),!0);if(t.length>0){const i=t[0].object;this.draggingHandle=this.handles.find(s=>s.mesh===i),this.dragPlane.set(new m(0,1,0),-i.position.y)}}pointerMove(e){if(!this.isEditing||!this.draggingHandle)return;this.updateMouse(e),this.raycaster.setFromCamera(this.mouse,this.camera);const t=new m;if(this.raycaster.ray.intersectPlane(this.dragPlane,t)){const i=this.draggingHandle;t.y=-2.5,i.mesh.position.copy(t),this.applyHandlePosition(i.index,t,{skipHistory:!0,skipDirty:!0})}}pointerUp(){var e;if(this.isEditing){if(this.draggingHandle){const t=(e=this.activePath)==null?void 0:e.userData.pathData;t&&t.points&&(this.pushHistory(t.points),this.viewer&&this.viewer.markPathDirty(t.id||t.path_id||this.activePath.userData.id))}this.draggingHandle=null}}applyHandlePosition(e,t,i={}){if(!this.activePath)return;const s=this.activePath.userData.pathData,o=s.points||s.path_points||[];if(!o[e])return;o[e]={x:t.x,y:t.y,z:t.z};const n=this.viewer&&this.viewer.pathSimplifyMultiplier?this.viewer.pathSimplifyMultiplier:1,a=Tt(o,n),l=Ct(o,a);this.rebuildPath(l,s),this.callbacks.onPointChange&&this.callbacks.onPointChange(l,s),i.skipHistory||this.pushHistory(l),!i.skipDirty&&this.viewer&&this.viewer.markPathDirty(s.id||s.path_id||this.activePath.userData.id)}pushHistory(e){const t=e.map(s=>({...s})),i=this.undoStack[this.undoStack.length-1];i&&i.length===t.length&&i.every((s,o)=>s.x===t[o].x&&s.y===t[o].y&&s.z===t[o].z)||(this.undoStack.push(t),this.undoStack.length>this.maxHistory&&this.undoStack.shift(),this.redoStack=[])}undo(){if(this.undoStack.length<=1)return;const e=this.undoStack.pop();this.redoStack.push(e);const t=this.undoStack[this.undoStack.length-1];this.applyHistoryState(t)}redo(){if(this.redoStack.length===0)return;const e=this.redoStack.pop();this.undoStack.push(e),this.applyHistoryState(e)}applyHistoryState(e){if(!this.activePath)return;const t=this.activePath.userData.pathData;this.rebuildPath(e,t),this.callbacks.onPointChange&&this.callbacks.onPointChange(e,t),this.clearHandles(),this.buildHandles()}rebuildPath(e,t){const i=this.activePath;[...i.children].forEach(r=>{i.remove(r),r.geometry&&r.geometry.dispose(),r.userData&&(r.userData.lowGeometry&&r.userData.lowGeometry!==r.geometry&&(r.userData.lowGeometry.dispose(),r.userData.lowGeometry=null),r.userData.highGeometry&&r.userData.highGeometry!==r.geometry&&(r.userData.highGeometry!==r.geometry&&r.userData.highGeometry.dispose(),r.userData.highGeometry=null)),r.material&&(Array.isArray(r.material)?r.material.forEach(d=>d.dispose()):r.material.dispose())});const o=t.width||2.5,n=t.height||2.5,a=t.color||"#808080",l=t.type||"tunnel";this.pathDrawer.createPathMesh(e.map(r=>new m(r.x,r.y,r.z)),o,n,a,l).children.forEach(r=>i.add(r)),t.points=e,t.path_points=e,this.clearHandles(),this.buildHandles(),i.traverse(r=>{r.userData&&r.userData._bs&&(r.userData._bs=null)})}}function Ct(y,e){if(!y||y.length<3)return y;const t=e*e;function i(n,a,l){let c=a.x,r=a.y,d=a.z,h=l.x-c,g=l.y-r,p=l.z-d;if(h!==0||g!==0||p!==0){let w=((n.x-c)*h+(n.y-r)*g+(n.z-d)*p)/(h*h+g*g+p*p);w>1?(c=l.x,r=l.y,d=l.z):w>0&&(c+=h*w,r+=g*w,d+=p*w)}return h=n.x-c,g=n.y-r,p=n.z-d,h*h+g*g+p*p}function s(n,a,l,c,r){let d=c,h=-1;for(let g=a+1;g<l;g++){const p=i(n[g],n[a],n[l]);p>d&&(h=g,d=p)}d>c&&h!==-1&&(h-a>1&&s(n,a,h,c,r),r.push(n[h]),l-h>1&&s(n,h,l,c,r))}const o=[y[0]];return s(y,0,y.length-1,t,o),o.push(y[y.length-1]),o}function Tt(y,e=1){if(!y||y.length<3)return .05*e;let t=0;for(let r=1;r<y.length;r++){const d=y[r].x-y[r-1].x,h=y[r].y-y[r-1].y,g=y[r].z-y[r-1].z;t+=Math.sqrt(d*d+h*h+g*g)}let i=0,s=0;for(let r=1;r<y.length-1;r++){const d=y[r-1],h=y[r],g=y[r+1],p=h.x-d.x,w=h.y-d.y,S=h.z-d.z,D=g.x-h.x,x=g.y-h.y,f=g.z-h.z,b=Math.sqrt(p*p+w*w+S*S)+1e-6,v=Math.sqrt(D*D+x*x+f*f)+1e-6,M=(p*D+w*x+S*f)/(b*v),O=Math.acos(Math.min(1,Math.max(-1,M)));i+=O,s++}const o=s?i/s:0,n=Math.min(1,t/500),a=1-Math.min(1,o/.8),c=(.05+.4*n*a)*e;return Math.min(1,Math.max(.02,c))}class kt{constructor(e,t,i){this.scene=e,this.camera=t,this.renderer=i,this.raycaster=new N,this.mouse=new q,this.selectedObject=null,this.multiSelect=!0,this.selectedObjects=new Set,this.selectableObjects=new Set,this.highlightMaterial=new B({color:16729156,transparent:!0,opacity:.3,depthTest:!1}),this.outlineColor=16711680,this.xrayModeObject=null,this.originalMaterials=new Map,this.callbacks={onObjectSelect:null,onObjectDeselect:null,onObjectDelete:null}}setCallbacks(e){this.callbacks={...this.callbacks,...e}}addSelectableObject(e,t={}){e.userData.selectable=!0,e.userData.objectData=t,this.selectableObjects.add(e)}removeSelectableObject(e){this.selectableObjects.delete(e),this.selectedObject===e&&this.deselectObject()}handleClick(e){this.updateMousePosition(e),this.raycaster.setFromCamera(this.mouse,this.camera);const t=Array.from(this.selectableObjects),i=this.raycaster.intersectObjects(t,!0);if(i.length>0){let s=null;for(const o of i){let n=o.object;for(;n&&!n.userData.selectable;)n=n.parent;if(n&&this.selectableObjects.has(n)){s=n;break}}if(s){const o=e.shiftKey;this.multiSelect&&o?this.selectedObjects.has(s)?this.deselectObject(s):this.addToSelection(s):(this.clearMultiSelection(),this.selectObject(s))}}else this.clearMultiSelection(),this.deselectObject()}updateMousePosition(e){const t=this.renderer.domElement.getBoundingClientRect();this.mouse.x=(e.clientX-t.left)/t.width*2-1,this.mouse.y=-((e.clientY-t.top)/t.height)*2+1}selectObject(e){if(this.selectedObject===e){e.userData.objectData&&e.userData.objectData.pathType==="tunnel"&&this.toggleXRayMode(e);return}this.deselectObject(),this.selectedObject=e,this.selectedObjects.add(e),this.addHighlight(e),e.userData.objectData&&e.userData.objectData.pathType==="tunnel"&&this.enableXRayMode(e),this.callbacks.onObjectSelect&&this.callbacks.onObjectSelect(e,e.userData.objectData)}deselectObject(){this.selectedObject&&(this.removeHighlight(this.selectedObject),this.disableXRayMode(),this.callbacks.onObjectDeselect&&this.callbacks.onObjectDeselect(this.selectedObject),this.selectedObject=null)}deleteSelectedObject(){if(this.selectedObject){const e=this.selectedObject;this.deselectObject(),this.callbacks.onObjectDelete&&this.callbacks.onObjectDelete(e)}}addHighlight(e){e.traverse(t=>{if(t.isMesh&&t.geometry){const i=new Re(t.geometry),s=new He(i,new U({color:this.outlineColor,linewidth:3}));s.name="highlight_outline",t.add(s)}})}removeHighlight(e){e.traverse(t=>{const i=t.getObjectByName("highlight_outline");i&&(t.remove(i),i.geometry.dispose(),i.material.dispose())})}deselectObject(e=null){if(e){this.removeHighlight(e),this.xrayModeObject===e&&this.disableXRayMode(),this.selectedObjects.delete(e),this.selectedObject===e&&(this.selectedObject=null),this.callbacks.onObjectDeselect&&this.callbacks.onObjectDeselect(e);return}this.selectedObject&&(this.removeHighlight(this.selectedObject),this.xrayModeObject===this.selectedObject&&this.disableXRayMode(),this.callbacks.onObjectDeselect&&this.callbacks.onObjectDeselect(this.selectedObject)),this.selectedObject=null,this.selectedObjects.clear()}addToSelection(e){this.selectedObjects.has(e)||(this.selectedObjects.add(e),this.addHighlight(e),this.callbacks.onObjectSelect&&this.callbacks.onObjectSelect(e,e.userData.objectData))}clearMultiSelection(){if(this.selectedObjects.size>1){for(const e of this.selectedObjects)e!==this.selectedObject&&this.removeHighlight(e);this.selectedObjects=this.selectedObject?new Set([this.selectedObject]):new Set}}enableXRayMode(e){this.xrayModeObject!==e&&(this.disableXRayMode(),this.xrayModeObject=e,e.traverse(t=>{if(t.isMesh){this.originalMaterials.set(t,t.material.clone());const i=t.material.clone();i.transparent=!0,i.opacity=.3,i.side=Se,t.material=i}}),console.log("[ObjectSelector] X-Ray mode enabled for tunnel"))}disableXRayMode(){this.xrayModeObject&&(this.xrayModeObject.traverse(e=>{e.isMesh&&this.originalMaterials.has(e)&&(e.material.dispose(),e.material=this.originalMaterials.get(e),this.originalMaterials.delete(e))}),this.xrayModeObject=null,console.log("[ObjectSelector] X-Ray mode disabled"))}toggleXRayMode(e){this.xrayModeObject===e?this.disableXRayMode():this.enableXRayMode(e)}}class Ot{constructor(e,t,i={}){if(console.log("%c[SimpleMine3DViewer] Constructor called","color: blue; font-weight: bold;"),console.log("[SimpleMine3DViewer] Parameters:",{containerId:e,mineId:t,options:i}),this.containerId=e,this.mineId=t,this.container=document.getElementById(e),this.options={enableWebGL2:!0,enableCollisionDetection:!0,enableAdvancedShaders:!0,debugCollisions:!1,debugPerformance:!1,...i},console.log("[SimpleMine3DViewer] Container element:",this.container),!this.container){const s=`Container with id "${e}" not found`;throw console.error("[SimpleMine3DViewer]",s),new Error(s)}console.log("[SimpleMine3DViewer] THREE.js (ESM) version:",st),this.scene=null,this.camera=null,this.renderer=null,this.controls=null,this.webgl2Renderer=null,this.collisionSystem=null,this.shaderManager=null,this.performanceMonitor=null,this.pathDrawer=null,this.pathEditor=null,this.objectCreator=null,this.transformControls=null,this.isPathDrawingMode=!1,this.isCreatingMode=!1,this.selectedObject=null,this.objectSelector=null,console.log("[SimpleMine3DViewer] Starting initialization..."),this._dirtyPaths=new Set,this._dirtyIndicatorEl=null,this.measurementsEnabled=!0,this.measurementStep=5,this._lastMeasuredTunnel=null,this.autoSaveSelection=!0,this.autoSaveDelay=800,this._autoSaveTimer=null,this._autoSaveInFlight=!1,this.init()}_getSelEls(){return this._selCache||(this._selCache={card:document.getElementById("selection-detail-card"),title:document.getElementById("sel-title"),meta:document.getElementById("sel-meta"),dyn:document.getElementById("sel-dynamic-fields"),gen:document.getElementById("sel-generic-fields"),status:document.getElementById("sel-status"),saveBtn:document.getElementById("sel-save-btn"),deleteBtn:document.getElementById("sel-delete-btn"),closeBtn:document.getElementById("sel-close-btn")},this._selCache.closeBtn&&this._selCache.closeBtn.addEventListener("click",()=>this.hideSelectionCard()),this._selCache.deleteBtn&&this._selCache.deleteBtn.addEventListener("click",()=>{var e;if(this.selectedObject&&confirm("Seçili nesneyi silmek istiyor musunuz?")){const t=this.selectedObject.userData.objectData||this.selectedObject.userData;t&&t.type==="path"?(e=this.objectSelector)==null||e.deleteSelectedObject():this.deleteSelectedObject()}}),this._selCache.saveBtn&&this._selCache.saveBtn.addEventListener("click",()=>this.saveSelectionEdits())),this._selCache}showSelectionCard(e,t){const i=this._getSelEls();i.card&&(i.card.style.display="block",this.populateSelectionCard(e,t))}hideSelectionCard(){const e=this._getSelEls();e.card&&(e.card.style.display="none")}markSelectionDirty(e=!0){const t=this._getSelEls();t.saveBtn&&(e?(t.saveBtn.disabled=!1,t.saveBtn.classList.add("btn-warning"),this.autoSaveSelection&&(clearTimeout(this._autoSaveTimer),this._autoSaveTimer=setTimeout(async()=>{if(!this._autoSaveInFlight){this._autoSaveInFlight=!0;try{await this.saveSelectionEdits()}catch(i){console.warn("[AutoSave] Selection auto-save failed:",i.message)}finally{this._autoSaveInFlight=!1}}},this.autoSaveDelay))):(t.saveBtn.disabled=!0,t.saveBtn.classList.remove("btn-warning")))}populateSelectionCard(e,t){var a,l;const i=this._getSelEls();if(!i.card)return;t=t||((a=e==null?void 0:e.userData)==null?void 0:a.objectData)||(e==null?void 0:e.userData)||{};const s=t.type==="path",o=t.type==="tunnel"||t.pathType==="tunnel";if(i.title&&(i.title.innerHTML=`<i class="fas fa-cube me-1"></i>${t.name||"Obje"}${s?' <span class="badge bg-info ms-1">Path</span>':""}`),i.meta&&(i.meta.innerHTML=`ID: <span class="text-light">${t.id??"-"}</span> · Tip: <span class="text-light">${t.pathType||t.type||"-"}</span>`),i.dyn){let c="";if(s)c+=this._buildNumberField("Genişlik (m)","sel-width",t.width,.1,100,.1),c+=this._buildNumberField("Yükseklik (m)","sel-height",t.height,.1,100,.1),c+=`<div class="mb-2"><label class="form-label mb-1">Segment Sayısı</label><div class="form-control form-control-sm bg-dark text-light">${(t.points||[]).length}</div></div>`,c+=`<div class="mb-2"><label class="form-label mb-1">Uzunluk</label><div class="form-control form-control-sm bg-dark text-light">${(t.length||0).toFixed(2)} m</div></div>`,c+=this._buildColorField("Renk","sel-color",t.color||"#808080");else if(o&&((l=e==null?void 0:e.userData)!=null&&l.parameters)){const r=e.userData.parameters;c+=this._buildNumberField("Genişlik (m)","sel-width",r.width,.5,50,.1),c+=this._buildNumberField("Yükseklik (m)","sel-height",r.height,.5,50,.1),c+=this._buildNumberField("Uzunluk (m)","sel-length",r.length,1,1e4,.5),c+=this._buildSelectField("Yön","sel-orientation",["yatay","dikey"],r.orientation),c+=this._buildNumberField("Açı (°)","sel-angle",r.angle||0,0,360,1),c+=this._buildColorField("Renk","sel-color",t.color||"#808080"),c+=this._buildNumberField("Ölçüm Adımı (m)","sel-meas-step",this.measurementStep,1,100,1)}else c+='<div class="text-muted small">Bu obje için düzenlenebilir alan yok.</div>';i.dyn.innerHTML=c}i.gen&&(i.gen.innerHTML=`<div class="mb-2"><label class="form-label mb-1">Pozisyon</label><div class="form-control form-control-sm bg-dark text-light">${e.position.x.toFixed(2)}, ${e.position.y.toFixed(2)}, ${e.position.z.toFixed(2)}</div></div>`),["sel-width","sel-height","sel-length","sel-angle","sel-orientation","sel-color"].forEach(c=>{const r=document.getElementById(c);r&&r.addEventListener("input",()=>{this.markSelectionDirty(!0),this._liveSelectionChange(c)})});const n=document.getElementById("sel-meas-step");n&&n.addEventListener("input",()=>{const c=parseInt(n.value,10);!isNaN(c)&&c>0&&(this.measurementStep=c,o&&this.buildTunnelMeasurements(e,t))}),this.markSelectionDirty(!1),i.status&&(i.status.textContent="")}_liveSelectionChange(e){if(!this.selectedObject)return;const t=this.selectedObject.userData&&(this.selectedObject.userData.objectData||this.selectedObject.userData)||{},i=t.type==="path",s=t.type==="tunnel"||t.pathType==="tunnel";if(i){const o=this.selectedObject,n=document.getElementById("sel-width"),a=document.getElementById("sel-height"),l=document.getElementById("sel-color"),c=parseFloat(n==null?void 0:n.value),r=parseFloat(a==null?void 0:a.value),d=l==null?void 0:l.value,h=o.userData.objectData||t;let g=!1;if(!isNaN(c)&&c>0&&c!==h.width&&(h.width=c,g=!0),!isNaN(r)&&r>0&&r!==h.height&&(h.height=r,g=!0),d&&d!==h.color&&(h.color=d,g=!0),g){const p=(h.points||h.path_points||[]).map(w=>new m(w.x,w.y,w.z));if(p.length>=2&&this.pathDrawer){const w=h.width||2.5,S=h.height||2.5,D=h.color||"#808080",x=h.pathType||h.type||"tunnel";if(!(this.pathEditor&&this.pathEditor.isEditing&&this.pathEditor.activePath===o)){for(;o.children.length;){const v=o.children.pop();v.geometry&&v.geometry.dispose(),v.material&&(Array.isArray(v.material)?v.material.forEach(M=>M.dispose()):v.material.dispose()),o.remove(v)}this.pathDrawer.createPathMesh(p,w,S,D,x).children.forEach(v=>o.add(v)),h.length=this.pathDrawer.calculatePathLength(p.map(v=>({x:v.x,y:v.y,z:v.z})));const b=document.getElementById("sel-dynamic-fields");b&&b.innerHTML.includes("Uzunluk")&&b.querySelectorAll("div")}}}}else if(s){const o={...this.selectedObject.userData.parameters||{}},n=document.getElementById("sel-width"),a=document.getElementById("sel-height"),l=document.getElementById("sel-length"),c=document.getElementById("sel-angle"),r=document.getElementById("sel-orientation"),d=document.getElementById("sel-color");let h=!1,g=!1;if(n&&!isNaN(parseFloat(n.value))&&parseFloat(n.value)!==o.width&&(o.width=parseFloat(n.value),h=!0),a&&!isNaN(parseFloat(a.value))&&parseFloat(a.value)!==o.height&&(o.height=parseFloat(a.value),h=!0),l&&!isNaN(parseFloat(l.value))&&parseFloat(l.value)!==o.length&&(o.length=parseFloat(l.value),h=!0),c&&!isNaN(parseFloat(c.value))&&parseFloat(c.value)!==o.angle&&(o.angle=parseFloat(c.value),h=!0),r&&r.value&&r.value!==o.orientation&&(g=!0,o.orientation=r.value,h=!0),d&&d.value&&this.selectedObject.material&&"#"+this.selectedObject.material.color.getHexString()!==d.value&&this.selectedObject.material.color.set(d.value),h&&(this.replaceTunnelGeometry(this.selectedObject,o),g&&this.camera&&this.controls)){const p=this.selectedObject.position.clone(),w=this.camera.position.distanceTo(p);let S;o.orientation==="dikey"||o.orientation==="vertical"?S=new m(p.x+w*.6,p.y+w*.8,p.z+w*.3):S=new m(p.x+w*.6,p.y+w*.3,p.z+w*.8);const D=this.camera.position.clone(),x=performance.now(),f=650,b=v=>{const M=Math.min(1,(v-x)/f),O=M<.5?2*M*M:-1+(4-2*M)*M;this.camera.position.lerpVectors(D,S,O),this.controls.target.lerpVectors(this.controls.target.clone(),p,O),M<1?requestAnimationFrame(b):this.controls.update()};requestAnimationFrame(b)}}}_buildNumberField(e,t,i,s,o,n){return i==null&&(i=""),`<div class="mb-2"><label class="form-label mb-1" for="${t}">${e}</label><input type="number" class="form-control form-control-sm bg-dark text-light" id="${t}" value="${i}" min="${s}" max="${o}" step="${n}"></div>`}_buildColorField(e,t,i){return`<div class="mb-2"><label class="form-label mb-1" for="${t}">${e}</label><input type="color" class="form-control form-control-color form-control-sm p-0 bg-dark border-0" id="${t}" value="${i}" title="Renk seç"></div>`}_buildSelectField(e,t,i,s){let o=a=>a;if(t==="sel-orientation"){const a={horizontal:"Yatay",vertical:"Dikey",yatay:"Yatay",dikey:"Dikey"};o=l=>a[l]||l,s==="horizontal"&&(s="yatay"),s==="vertical"&&(s="dikey"),i=i.map(l=>l==="horizontal"?"yatay":l==="vertical"?"dikey":l)}const n=i.map(a=>`<option value="${a}" ${a===s?"selected":""}>${o(a)}</option>`).join("");return`<div class="mb-2"><label class="form-label mb-1" for="${t}">${e}</label><select class="form-select form-select-sm bg-dark text-light" id="${t}">${n}</select></div>`}async saveSelectionEdits(){var s,o,n,a,l,c,r,d,h,g;const e=this._getSelEls();if(!this.selectedObject||!e.saveBtn)return;const t=this.selectedObject.userData.objectData||this.selectedObject.userData||{},i=t.type==="path";try{if(i){const p={},w=parseFloat((s=document.getElementById("sel-width"))==null?void 0:s.value),S=parseFloat((o=document.getElementById("sel-height"))==null?void 0:o.value),D=(n=document.getElementById("sel-color"))==null?void 0:n.value;isNaN(w)||(p.width=w),isNaN(S)||(p.height=S),D&&(p.color=D),await this.updatePathToServer(t.id,p)}else if((t.type==="tunnel"||t.pathType==="tunnel")&&this.selectedObject.userData.serverId){const p={...this.selectedObject.userData.parameters},w=parseFloat((a=document.getElementById("sel-width"))==null?void 0:a.value),S=parseFloat((l=document.getElementById("sel-height"))==null?void 0:l.value),D=parseFloat((c=document.getElementById("sel-length"))==null?void 0:c.value),x=parseFloat((r=document.getElementById("sel-angle"))==null?void 0:r.value),f=(d=document.getElementById("sel-orientation"))==null?void 0:d.value,b=(h=document.getElementById("sel-color"))==null?void 0:h.value;isNaN(w)||(p.width=w),isNaN(S)||(p.height=S),isNaN(D)||(p.length=D),isNaN(x)||(p.angle=x),f&&(p.orientation=f),b&&this.selectedObject.material&&this.selectedObject.material.color.set(b),this.replaceTunnelGeometry(this.selectedObject,p),await fetch(`/api/mines/${this.mineId}/models/${this.selectedObject.userData.serverId}`,{method:"PUT",headers:{"Content-Type":"application/json",Accept:"application/json","X-CSRF-TOKEN":((g=document.querySelector('meta[name="csrf-token"]'))==null?void 0:g.getAttribute("content"))||""},body:JSON.stringify({geometry:{type:"tunnel",params:p}})})}e.status&&(e.status.textContent="Kaydedildi"),this.markSelectionDirty(!1),setTimeout(()=>{this.deselectObject(),console.log("[SimpleMine3DViewer] Selection edits saved and object deselected")},500)}catch(p){console.error("Selection save error",p),e.status&&(e.status.style.color="#ff6b6b",e.status.textContent="Kaydetme hatası")}}async init(){var e,t;try{console.log("%c[SimpleMine3DViewer] Initializing 3D system...","color: green; font-weight: bold;");const i=document.getElementById("loading-container");i&&(i.style.opacity="0",i.style.pointerEvents="none",i.style.transition="opacity .3s",setTimeout(()=>{i&&(i.style.display="none")},350)),this.container.style.display="block",console.log("[SimpleMine3DViewer] Container dimensions:",{clientWidth:this.container.clientWidth,clientHeight:this.container.clientHeight,offsetWidth:this.container.offsetWidth,offsetHeight:this.container.offsetHeight}),(this.container.clientWidth===0||this.container.clientHeight===0)&&console.warn("[SimpleMine3DViewer] Container has zero dimensions, using default sizes"),console.log("[SimpleMine3DViewer] Creating scene..."),this.scene=new nt,this.scene.background=new F(8900331),console.log("[SimpleMine3DViewer] Scene created:",this.scene),console.log("[SimpleMine3DViewer] Creating camera...");const s=this.container.clientWidth/this.container.clientHeight||16/9;this.camera=new ot(60,s,.1,500),this.camera.position.set(15,5,25),this.camera.lookAt(0,-2,0),console.log("[SimpleMine3DViewer] Camera created:",{fov:this.camera.fov,aspect:this.camera.aspect,position:this.camera.position,near:this.camera.near,far:this.camera.far}),console.log("[SimpleMine3DViewer] Creating renderer..."),this.renderer=new be({antialias:!0,alpha:!0,powerPreference:"high-performance"});const o=this.container.clientWidth||800,n=this.container.clientHeight||600;if(this.renderer.setSize(o,n),this.renderer.setPixelRatio(Math.min(window.devicePixelRatio,2)),this.renderer.shadowMap.enabled=!1,this.renderer.toneMapping=Fe,this.renderer.toneMappingExposure=1.2,this.renderer.outputColorSpace=Ae,this.renderer.domElement.style.width="100%",this.renderer.domElement.style.height="100%",this.renderer.domElement.style.display="block",this.renderer.domElement.style.position="relative",console.log("[SimpleMine3DViewer] Renderer created:",{width:o,height:n,shadowMap:this.renderer.shadowMap.enabled,toneMapping:this.renderer.toneMapping,domElement:this.renderer.domElement}),console.log("[SimpleMine3DViewer] Appending renderer to container..."),this.container.appendChild(this.renderer.domElement),console.log("[SimpleMine3DViewer] Renderer appended successfully"),console.log("[SimpleMine3DViewer] Adding lights..."),this.addLights(),this.options.enableWebGL2)try{console.log("🚀 Initializing WebGL2 Enhanced Renderer..."),this.webgl2Renderer=new bt(this.container,{debug:this.options.debugPerformance,...this.options}),this.webgl2Renderer.isWebGL2Supported?(this.container.removeChild(this.renderer.domElement),this.renderer.dispose(),this.renderer=this.webgl2Renderer.renderer,console.log("✅ WebGL2 Enhanced Renderer activated")):console.log("⚠️ WebGL2 not supported, using standard renderer")}catch(l){console.warn("⚠️ WebGL2 Enhanced Renderer failed to initialize:",l)}if(this.options.enableCollisionDetection)try{console.log("🔍 Initializing Collision Detection System..."),this.collisionSystem=new xt(this.scene,{debug:this.options.debugCollisions,enableSpatialPartitioning:!0,gridSize:10,debugVisualization:this.options.debugCollisions}),console.log("✅ Collision Detection System activated")}catch(l){console.warn("⚠️ Collision Detection System failed to initialize:",l)}if(this.options.enableAdvancedShaders&&this.renderer)try{if(console.log("🎨 Initializing Advanced Shader Manager..."),this.shaderManager=new Mt(this.renderer),(e=this.webgl2Renderer)!=null&&e.isWebGL2Supported){const l=this.webgl2Renderer.createAdvancedLighting(this.scene);console.log("✨ Enhanced WebGL2 lighting activated")}console.log("✅ Advanced Shader Manager activated")}catch(l){console.warn("⚠️ Advanced Shader Manager failed to initialize:",l)}if(this.options.debugPerformance||this.options.enablePerformanceMonitoring)try{console.log("📊 Initializing Performance Monitor..."),this.performanceMonitor=new St({enableGPUTiming:((t=this.webgl2Renderer)==null?void 0:t.isWebGL2Supported)||!1,enableMemoryMonitoring:!0,alertThresholds:{fps:20,memoryMB:300,drawCalls:800}}),this.performanceMonitor.onAlert((l,c)=>{c.forEach(r=>{console.warn(`📊 Performance Alert [${r.type}]:`,r.message),r.severity==="critical"&&this.showError(`Performance issue: ${r.message}`)})}),this.performanceMonitor.startMonitoring(this.renderer),console.log("✅ Performance Monitor activated")}catch(l){console.warn("⚠️ Performance Monitor failed to initialize:",l)}console.log("[SimpleMine3DViewer] Adding test geometry..."),this.addTestGeometry(),console.log("[SimpleMine3DViewer] Setting up controls..."),this.controls=new at(this.camera,this.renderer.domElement),this.controls.enableDamping=!0,this.controls.dampingFactor=.05,this.controls.enableZoom=!0,this.controls.enablePan=!0,this.controls.enableRotate=!0,this.controls.rotateSpeed=4,this.controls.zoomSpeed=5,this.controls.panSpeed=4.5,this.controls.minDistance=1,this.controls.maxDistance=1e3,this.controls.zoomToCursor=!0,this.controls.maxPolarAngle=Math.PI*.9,this.controls.minPolarAngle=Math.PI*.1,this.controls.maxAzimuthAngle=1/0,this.controls.minAzimuthAngle=-1/0,this.controls.autoRotate=!1,this.controls.autoRotateSpeed=1,this.controls.enableKeys=!0,this.controls.keys={LEFT:"ArrowLeft",UP:"ArrowUp",RIGHT:"ArrowRight",BOTTOM:"ArrowDown"},this.controls.mouseButtons={LEFT:ge.ROTATE,MIDDLE:ge.DOLLY,RIGHT:ge.PAN},this.controls.touches={ONE:ke.ROTATE,TWO:ke.DOLLY_PAN},this.controls.target.set(0,-3,0),this.controls.update(),console.log("[SimpleMine3DViewer] OrbitControls initialized with enhanced settings:",this.controls),console.log("[SimpleMine3DViewer] Initializing path drawer..."),this.pathDrawer=new Pt(this.scene,this.camera,this.renderer),this.setupPathDrawingEvents(),this.pathEditor=new Et(this.scene,this.camera,this.renderer,this.pathDrawer),this.pathEditor.setCallbacks({onPointChange:(l,c)=>{var r,d;if(this.markPathDirty(c.id||c.pathId),this.selectedObject&&(((r=this.selectedObject.userData.objectData)==null?void 0:r.id)===c.id||((d=this.selectedObject.userData.objectData)==null?void 0:d.pathId)===c.id)){const h=this.selectedObject.userData.objectData;h&&(h.points=l,h.path_points=l,h.length=this.pathDrawer.calculatePathLength(l),this.populateSelectionCard(this.selectedObject,h))}}}),console.log("[SimpleMine3DViewer] Initializing object creator..."),this.objectCreator=new Dt(this.scene,this.camera,this.renderer,this),console.log("[SimpleMine3DViewer] Initializing transform controls..."),this.transformControls=new mt(this.camera,this.renderer.domElement),this.transformControls.addEventListener("change",()=>this.renderer.render(this.scene,this.camera)),this.transformControls.addEventListener("dragging-changed",l=>{this.controls.enabled=!l.value}),this.scene.add(this.transformControls),setTimeout(()=>{this.setupMiningControls()},100),console.log("[SimpleMine3DViewer] Initializing object selector..."),this.objectSelector=new kt(this.scene,this.camera,this.renderer),this.setupObjectSelection(),this.renderer.domElement.addEventListener("pointerdown",l=>{this.pathEditor&&this.pathEditor.isEditing&&this.pathEditor.pointerDown(l)}),this.renderer.domElement.addEventListener("pointermove",l=>{this.pathEditor&&this.pathEditor.isEditing&&this.pathEditor.pointerMove(l)}),this.renderer.domElement.addEventListener("pointerup",l=>{this.pathEditor&&this.pathEditor.isEditing&&this.pathEditor.pointerUp(l)}),console.log("[SimpleMine3DViewer] Loading mine data..."),await this.loadMineData(),console.log("[SimpleMine3DViewer] Starting render loop..."),this.animate(),console.log("%c[SimpleMine3DViewer] Initialization completed successfully!","color: green; font-weight: bold; font-size: 14px;");const a=document.getElementById("loading-container");a&&a.style.display!=="none"&&(console.log("[SimpleMine3DViewer] Forcing loading container hide at end"),a.remove())}catch(i){throw console.error("%c[SimpleMine3DViewer] Initialization failed:","color: red; font-weight: bold;",{message:i.message,stack:i.stack,name:i.name}),i}}addLights(){console.log("[SimpleMine3DViewer] Adding shadowless lights to scene...");const e=new $e(4210752,.6);this.scene.add(e),console.log("[SimpleMine3DViewer] Ambient light added:",e);const t=new Ve(16777215,.9);t.position.set(50,50,50),t.castShadow=!1,this.scene.add(t),console.log("[SimpleMine3DViewer] Directional light added (shadowless):",t);const i=new rt(8900331,9127187,.5);i.position.set(0,20,0),this.scene.add(i),console.log("[SimpleMine3DViewer] Hemisphere light added:",i),[{pos:[10,2,10],color:16768324,intensity:.4},{pos:[-10,2,10],color:16768324,intensity:.4},{pos:[10,2,-10],color:16768324,intensity:.4},{pos:[-10,2,-10],color:16768324,intensity:.4}].forEach((o,n)=>{const a=new xe(o.color,o.intensity,25);a.position.set(...o.pos),a.castShadow=!1,this.scene.add(a)}),console.log("[SimpleMine3DViewer] Mining lights added successfully")}setupMiningControls(){console.log("[SimpleMine3DViewer] Setting up mining controls...");const e=document.querySelectorAll(".mining-tool-btn");console.log("[SimpleMine3DViewer] Found tool buttons:",e.length,e),e.forEach(l=>{const c=l.getAttribute("data-tool");console.log("[SimpleMine3DViewer] Setting up button for tool:",c),l.addEventListener("click",r=>{r.preventDefault(),console.log(`🛠️ Mining tool butonuna tıklandı: ${c}`),this.startMiningTool(c)})});const t=document.getElementById("axis-x-btn"),i=document.getElementById("axis-y-btn"),s=document.getElementById("axis-z-btn"),o=document.getElementById("free-draw-btn");t&&t.addEventListener("click",()=>this.setDrawingConstraint("x")),i&&i.addEventListener("click",()=>this.setDrawingConstraint("y")),s&&s.addEventListener("click",()=>this.setDrawingConstraint("z")),o&&o.addEventListener("click",()=>this.setDrawingConstraint("free"));const n=document.getElementById("reset-camera-btn"),a=document.getElementById("toggle-grid-btn");n&&n.addEventListener("click",()=>{this.camera.position.set(15,5,25),this.camera.lookAt(0,-2,0),this.controls.target.set(0,-3,0),this.controls.update()}),a&&a.addEventListener("click",()=>{const l=this.scene.getObjectByName("grid_helper");l&&(l.visible=!l.visible)}),console.log("[SimpleMine3DViewer] Mining controls setup completed")}startMiningTool(e){console.log("🚀 [SimpleMine3DViewer] Starting mining tool:",e),this.isPathDrawingMode&&(console.log("🛑 Mevcut çizim modu durduruluyor..."),this.stopPathDrawing()),this.isCreatingMode&&(console.log("� Mevcut oluşturma modu durduruluyor..."),this.stopCreating()),console.log("🔧 Object creation mode başlatılıyor:",e),this.isCreatingMode=!0,this.controls.enabled=!1,this.objectCreator.startCreating(e),console.log("� Button states güncelleniyor..."),this.updateToolButtonStates(e),console.log("🎉 Mining tool başlatma işlemi tamamlandı:",e)}stopCreating(){this.isCreatingMode&&(this.isCreatingMode=!1,this.controls.enabled=!0,this.objectCreator.stopCreating(),this.deselectObject(),this.updateToolButtonStates(null),console.log("[SimpleMine3DViewer] Creating mode stopped"))}updateToolIndicator(e){const t=document.getElementById("tool-indicator"),i=document.getElementById("tool-name");if(t&&i){const o={tunnel:{icon:"fas fa-mountain",name:"Tünel Kazma"},road:{icon:"fas fa-road",name:"Yol İnşaası"},rail:{icon:"fas fa-train",name:"Ray Döşeme"},conveyor:{icon:"fas fa-conveyor-belt",name:"Konveyör Kurma"}}[e]||{icon:"fas fa-tools",name:"Bilinmeyen Araç"};t.querySelector("i").className=o.icon+" me-2",i.textContent=o.name,t.style.display="block"}}updateToolButtonStates(e){document.querySelectorAll(".mining-tool-btn").forEach(i=>{const s=i.getAttribute("data-tool");i.classList.remove("btn-warning","btn-info","btn-success","btn-danger","btn-outline-warning","btn-outline-info","btn-outline-success","btn-outline-danger"),s===e?i.classList.add(`btn-${this.getToolColor(s)}`):i.classList.add(`btn-outline-${this.getToolColor(s)}`)}),console.log("[SimpleMine3DViewer] Tool button states updated, active tool:",e)}getToolColor(e){return{tunnel:"warning",road:"info",rail:"success",conveyor:"danger"}[e]||"secondary"}setDrawingConstraint(e){console.log("[SimpleMine3DViewer] Setting drawing constraint to:",e),this.activeConstraint=e,document.querySelectorAll("#axis-x-btn, #axis-y-btn, #axis-z-btn, #free-draw-btn").forEach(s=>{s.classList.remove("btn-light","btn-outline-light"),s.classList.add("btn-outline-light")});let i=null;switch(e){case"x":i=document.getElementById("axis-x-btn");break;case"y":i=document.getElementById("axis-y-btn");break;case"z":i=document.getElementById("axis-z-btn");break;case"free":i=document.getElementById("free-draw-btn");break}i&&(i.classList.remove("btn-outline-light"),i.classList.add("btn-light")),this.pathDrawer&&this.pathDrawer.setAxisConstraint(e),console.log("[SimpleMine3DViewer] Constraint set to:",e)}addTestGeometry(){console.log("[SimpleMine3DViewer] Adding test geometry...");try{console.log("[SimpleMine3DViewer] Creating infinite ground plane...");const e=2e4,t=new ve(e,e,50,50),i=new me({color:5668166,transparent:!1}),s=new u(t,i);s.rotation.x=-Math.PI/2,s.position.y=-5,s.receiveShadow=!0,s.name="ground_plane",this.scene.add(s),console.log("[SimpleMine3DViewer] Infinite ground plane added:",s);const o=new lt(e,100,8947848,4473924);o.position.y=-4.9,o.material.opacity=.3,o.material.transparent=!0,this.scene.add(o);const n=new ve(e,e),a=new me({color:9127187,transparent:!0,opacity:.8}),l=new u(n,a);l.rotation.x=-Math.PI/2,l.position.y=-10,l.receiveShadow=!0,l.name="underground_layer",this.scene.add(l),console.log("[SimpleMine3DViewer] Test geometry added successfully"),console.log("[SimpleMine3DViewer] Scene children count:",this.scene.children.length)}catch(e){throw console.error("[SimpleMine3DViewer] Error adding test geometry:",e),e}}async loadMineData(){console.log("[SimpleMine3DViewer] Loading mine data for mine ID:",this.mineId);try{const e=`/api/mines/${this.mineId}/scene-data`;console.log("[SimpleMine3DViewer] Fetching from URL:",e);const t=await fetch(e);if(console.log("[SimpleMine3DViewer] Fetch response:",{ok:t.ok,status:t.status,statusText:t.statusText,headers:Object.fromEntries(t.headers.entries())}),!t.ok)throw new Error(`HTTP ${t.status}: ${t.statusText}`);const i=await t.json();console.log("[SimpleMine3DViewer] Mine data loaded successfully:",i),i&&i.models&&console.log("[SimpleMine3DViewer] Processing",i.models.length,"models"),i&&i.layers&&console.log("[SimpleMine3DViewer] Processing",i.layers.length,"layers"),i&&i.paths&&(console.log("[SimpleMine3DViewer] Processing",i.paths.length,"paths"),this.loadPaths(i.paths))}catch(e){console.warn("[SimpleMine3DViewer] Could not load mine data:",{message:e.message,stack:e.stack}),console.log("[SimpleMine3DViewer] Continuing with test geometry only")}}loadPaths(e){console.log("[SimpleMine3DViewer] Loading paths:",e),e.forEach(t=>{if(t.path_points&&t.path_points.length>1){const i=t.path_points.map(o=>new m(o.x,o.y,o.z)),s=this.pathDrawer.createPath({id:t.id,points:i,width:t.width||3,height:t.height||3,color:t.color||"#808080",type:t.type||"tunnel"});s&&this.objectSelector&&this.objectSelector.addSelectableObject(s,{id:t.id,type:"path",name:t.name,pathType:t.type,width:t.width,height:t.height,color:t.color,material:t.material,points:t.path_points,length:this.pathDrawer.calculatePathLength(t.path_points)})}})}animate(){const e=performance.now(),t=e*.001;requestAnimationFrame(()=>this.animate());try{if(this.controls&&this.controls.update(),this.collisionSystem&&this.collisionSystem.update(),this.shaderManager&&this.shaderManager.updateShaderUniforms(t,this.camera),this.performanceMonitor&&this.performanceMonitor.update(),this.pathDrawer&&this.pathDrawer.updateLOD(),this._measurementGroup&&this.camera){const o=this.camera.quaternion;this._measurementGroup.traverse(n=>{n.isSprite&&n.quaternion.copy(o)})}this.webgl2Renderer?this.webgl2Renderer.render(this.scene,this.camera):this.renderer&&this.scene&&this.camera?this.renderer.render(this.scene,this.camera):console.error("[SimpleMine3DViewer] Missing components for rendering:",{renderer:!!this.renderer,scene:!!this.scene,camera:!!this.camera})}catch(o){console.error("[SimpleMine3DViewer] Render error:",o)}const s=performance.now()-e;this.frameCount||(this.frameCount=0),this.frameCount++,this.frameCount%60===0&&console.log(`[SimpleMine3DViewer] Performance - Frame ${this.frameCount}, Frame time: ${s.toFixed(2)}ms`)}destroy(){this.renderer&&(this.container.removeChild(this.renderer.domElement),this.renderer.dispose())}setupPathDrawingEvents(){const e=this.renderer.domElement;this.boundHandlers={click:t=>this.handleCanvasClick(t),mousemove:t=>this.handleCanvasMouseMove(t),keydown:t=>this.handleKeyDown(t)},e.addEventListener("click",this.boundHandlers.click),e.addEventListener("mousemove",this.boundHandlers.mousemove),document.addEventListener("keydown",this.boundHandlers.keydown)}handleCanvasClick(e){e.preventDefault(),e.stopPropagation(),this.isPathDrawingMode?this.pathDrawer.handleClick(e):this.isCreatingMode?this.updateCreationPosition(e):(this.objectSelector?this.objectSelector.handleClick(e):this.handleObjectSelection(e),!this.selectedObject&&this.objectCreator&&this.objectCreator.previewObject&&this.objectCreator.removePreview())}updateCreationPosition(e){const t=this.renderer.domElement.getBoundingClientRect(),i=new q;i.x=(e.clientX-t.left)/t.width*2-1,i.y=-((e.clientY-t.top)/t.height)*2+1;const s=new N;s.setFromCamera(i,this.camera);const o=new De(new m(0,1,0),-2),n=new m;s.ray.intersectPlane(o,n)&&(this.objectCreator.currentPosition.copy(n),this.objectCreator.createPreview(),console.log("[SimpleMine3DViewer] Updated creation position:",n))}handleObjectSelection(e){const t=this.renderer.domElement.getBoundingClientRect(),i=new q;i.x=(e.clientX-t.left)/t.width*2-1,i.y=-((e.clientY-t.top)/t.height)*2+1;const s=new N;s.setFromCamera(i,this.camera);const o=[];this.scene.traverse(a=>{a.userData&&a.userData.selectable&&a.isMesh&&o.push(a)});const n=s.intersectObjects(o);if(n.length>0){const a=n[0].object;this.selectObject(a)}else this.deselectObject()}selectObject(e){this.selectedObject&&this.deselectObject(),this.selectedObject=e,this.transformControls.attach(e),this.addHighlight(e)}deselectObject(){this.selectedObject&&(this.transformControls.detach(),this.removeHighlight(this.selectedObject),this.selectedObject=null,console.log("[SimpleMine3DViewer] Object deselected")),this.objectCreator&&this.objectCreator.removePreview()}addHighlight(e){e.userData.originalMaterial||(e.userData.originalMaterial=e.material,e.material=e.material.clone(),e.material.emissive.setHex(4473924))}removeHighlight(e){e.userData.originalMaterial&&(e.material.dispose(),e.material=e.userData.originalMaterial,delete e.userData.originalMaterial)}markPathDirty(e){e&&(clearTimeout(this._pathSaveTimer),this.setPathDirtyVisual(!0),this._dirtyPaths.add(e),this._pathSaveTimer=setTimeout(async()=>{const t=this.pathDrawer.getPath(e);if(!t)return;const i=t.userData.pathData||{};try{await this.updatePathToServer(e,{points:i.points||i.path_points}),this._dirtyPaths.delete(e),this._dirtyPaths.size===0&&this.setPathDirtyVisual(!1)}catch{}},600))}setPathDirtyVisual(e){this._dirtyIndicatorEl||(this._dirtyIndicatorEl=document.getElementById("save-path-btn")),this._dirtyIndicatorEl&&(e?this._dirtyIndicatorEl.classList.add("dirty"):this._dirtyIndicatorEl.classList.remove("dirty"))}handleCanvasMouseMove(e){this.isPathDrawingMode&&this.pathDrawer.handleMouseMove(e)}handleKeyDown(e){console.log("[SimpleMine3DViewer] Key pressed:",e.key),e.key==="Escape"?(e.preventDefault(),this.isPathDrawingMode?(this.pathDrawer.stopDrawing(),this.stopPathDrawing()):this.isCreatingMode?this.stopCreating():this.selectedObject&&this.deselectObject()):e.key==="Enter"&&this.isPathDrawingMode?(e.preventDefault(),this.completeCurrentPath()):e.key==="Delete"||e.key==="Backspace"?(e.preventDefault(),this.selectedObject?this.deleteSelectedObject():console.log("[SimpleMine3DViewer] No object selected for deletion")):e.key==="g"||e.key==="G"?(e.preventDefault(),this.selectedObject&&this.transformControls.object&&this.cycleTransformMode()):(e.metaKey||e.ctrlKey)&&(e.key==="z"||e.key==="Z")?(e.preventDefault(),this.pathEditor&&this.pathEditor.isEditing&&this.pathEditor.undo()):(e.metaKey||e.ctrlKey)&&e.shiftKey&&(e.key==="z"||e.key==="Z")?(e.preventDefault(),this.pathEditor&&this.pathEditor.isEditing&&this.pathEditor.redo()):(e.key==="m"||e.key==="M")&&(e.preventDefault(),this.toggleMeasurements())}toggleMeasurements(e=null){const t=e===null?!this.measurementsEnabled:!!e;if(t!==this.measurementsEnabled){if(this.measurementsEnabled=t,!t)this._measurementGroup&&(this._measurementGroup.traverse(i=>{i.geometry&&i.geometry.dispose(),i.material&&i.material.dispose()}),this.scene.remove(this._measurementGroup),this._measurementGroup=null);else if(this._lastMeasuredTunnel){const{object:i,data:s}=this._lastMeasuredTunnel;this.buildTunnelMeasurements(i,s)}console.log("[SimpleMine3DViewer] Measurements toggled ->",this.measurementsEnabled)}}cycleTransformMode(){const e=this.transformControls.getMode(),t=["translate","rotate","scale"],i=t.indexOf(e),s=t[(i+1)%t.length];this.transformControls.setMode(s),console.log("[SimpleMine3DViewer] Transform mode changed to:",s)}async saveObjectToServer(e){var t,i;try{const s={mine_id:this.mineId,name:`${e.userData.type.charAt(0).toUpperCase()+e.userData.type.slice(1)} ${e.userData.id}`,type:e.userData.type,geometry:{type:e.userData.type,...e.userData.parameters},material:{color:e.material.color.getHex(),opacity:e.material.opacity||1},position:[e.position.x,e.position.y,e.position.z],rotation:[e.rotation.x,e.rotation.y,e.rotation.z],scale:[e.scale.x,e.scale.y,e.scale.z],properties:{createdAt:new Date().toISOString(),tool:e.userData.type},visible:!0,order:e.userData.id},o=await fetch(`/api/mines/${this.mineId}/models`,{method:"POST",headers:{"Content-Type":"application/json","X-CSRF-TOKEN":((t=document.querySelector('meta[name="csrf-token"]'))==null?void 0:t.getAttribute("content"))||"",Accept:"application/json"},body:JSON.stringify(s)});if(o.ok){const n=await o.json();e.userData.serverId=(i=n.data)==null?void 0:i.id,console.log("[SimpleMine3DViewer] Successfully saved object to server:",n),this.showSuccess("Obje başarıyla kaydedildi!"),this.deselectObject(),this.forceExitCreationMode(),console.log("[SimpleMine3DViewer] Obje kaydedildi ve düzenleme modu kapatıldı")}else throw new Error(`HTTP ${o.status}: ${o.statusText}`)}catch(s){console.error("[SimpleMine3DViewer] Error saving object to server:",s),this.showError("Obje kaydedilemedi: "+s.message)}}forceExitCreationMode(){var t,i;if(this.objectCreator){this.objectCreator.isCreating=!1;try{(i=(t=this.objectCreator).hideCreationUI)==null||i.call(t)}catch{}try{this.objectCreator.removePreview()}catch{}}this.isCreatingMode=!1,this.isPathDrawingMode=!1,this.transformControls&&this.transformControls.detach(),this.selectedObject&&(this.removeHighlight(this.selectedObject),this.selectedObject=null),this.controls&&(this.controls.enabled=!0);const e=document.getElementById("creation-panel");e&&(e.style.display="none"),this.showPathDrawingUI(!1),this.updateToolButtonStates(null),console.log("[SimpleMine3DViewer] Force exited all creation/editing modes")}showSuccess(e){const t=document.createElement("div");t.style.cssText=`
            position: fixed;
            top: 20px;
            left: 50%;
            transform: translateX(-50%);
            background: #44aa44;
            color: white;
            padding: 10px 20px;
            border-radius: 5px;
            z-index: 10000;
        `,t.textContent=e,document.body.appendChild(t),setTimeout(()=>{t.parentNode&&document.body.removeChild(t)},3e3)}showError(e){const t=document.createElement("div");t.style.cssText=`
            position: fixed;
            top: 20px;
            left: 50%;
            transform: translateX(-50%);
            background: #ff4444;
            color: white;
            padding: 10px 20px;
            border-radius: 5px;
            z-index: 10000;
        `,t.textContent=e,document.body.appendChild(t),setTimeout(()=>{t.parentNode&&document.body.removeChild(t)},3e3)}deleteSelectedObject(){if(this.selectedObject){const e=this.selectedObject;this.transformControls.detach(),this.scene.remove(e),e.geometry&&e.geometry.dispose(),e.material&&e.material.dispose(),this.objectCreator.createdObjects.has(e.userData.id)&&this.objectCreator.createdObjects.delete(e.userData.id),this.selectedObject=null,console.log("[SimpleMine3DViewer] Object deleted:",e.userData),e.userData.serverId&&this.deleteFromServer(e.userData.serverId)}}async deleteFromServer(e){var t;try{const i=await fetch(`/api/mines/${this.mineId}/models/${e}`,{method:"DELETE",headers:{"X-CSRF-TOKEN":((t=document.querySelector('meta[name="csrf-token"]'))==null?void 0:t.getAttribute("content"))||"",Accept:"application/json"}});if(i.ok)console.log("[SimpleMine3DViewer] Successfully deleted from server"),this.showSuccess("Obje başarıyla silindi!");else throw new Error(`HTTP ${i.status}: ${i.statusText}`)}catch(i){console.error("[SimpleMine3DViewer] Error deleting from server:",i),this.showError("Obje silinemedi: "+i.message)}}setupObjectSelection(){this.objectSelector.setCallbacks({onObjectSelect:(e,t)=>this.onObjectSelected(e,t),onObjectDeselect:e=>this.onObjectDeselected(e),onObjectDelete:e=>this.onObjectDelete(e)})}onObjectSelected(e,t){const i=t||e&&e.userData&&e.userData.objectData||e.userData||{};if(console.log("[SimpleMine3DViewer] Object selected:",i),this.selectedObject=e,this.showSelectionCard(e,i),i&&(i.pathType||i.type==="path")&&this.pathEditor){const s=e.parent&&e.parent.userData&&e.parent.userData.pathData?e.parent:e;this.pathEditor.startEditing(s)}i&&i.type==="tunnel"&&this.buildTunnelMeasurements(e,i)}onObjectDeselected(e){console.log("[SimpleMine3DViewer] Object deselected"),this._measurementGroup&&(this._measurementGroup.traverse(t=>{t.geometry&&t.geometry.dispose(),t.material&&t.material.dispose()}),this.scene.remove(this._measurementGroup),this._measurementGroup=null),this.selectedObject=null,this.hideSelectionCard(),this.pathEditor&&this.pathEditor.isEditing&&this.pathEditor.stopEditing()}async onObjectDelete(e){var i;console.log("[SimpleMine3DViewer] Deleting object:",e.userData.objectData);const t=e.userData.objectData;if(t&&t.id&&t.type==="path")try{const s=await fetch(`/api/mines/${this.mineId}/paths/${t.id}`,{method:"DELETE",headers:{"X-CSRF-TOKEN":((i=document.querySelector('meta[name="csrf-token"]'))==null?void 0:i.getAttribute("content"))||"",Accept:"application/json"}});if(s.ok)this.pathDrawer.removePath(t.id),this.objectSelector.removeSelectableObject(e),console.log("[SimpleMine3DViewer] Path deleted successfully");else throw new Error(`HTTP ${s.status}: ${s.statusText}`)}catch(s){console.error("[SimpleMine3DViewer] Error deleting path:",s),this.showError("Yol silinemedi: "+s.message)}}startPathDrawing(){this.isPathDrawingMode=!0,this.controls.enabled=!1,this.pathDrawer.startDrawing({onPathStart:()=>console.log("[SimpleMine3DViewer] Yol çizimi başladı"),onPathUpdate:e=>console.log("[SimpleMine3DViewer] Yol güncellendi, nokta sayısı:",e.length),onPathComplete:e=>this.onPathDrawingComplete(e)}),this.showPathDrawingUI(!0),console.log("[SimpleMine3DViewer] Yol çizim modu aktif")}stopPathDrawing(){this.isPathDrawingMode=!1,this.controls.enabled=!0,this.pathDrawer.stopDrawing(),this.showPathDrawingUI(!1),console.log("[SimpleMine3DViewer] Yol çizim modu pasif")}completeCurrentPath(){if(this.isPathDrawingMode){console.log("[SimpleMine3DViewer] Manual path completion");const e=this.pathDrawer.completePath();e&&e.length>1&&(this.onPathDrawingComplete(e),this.stopPathDrawing())}}onPathDrawingComplete(e){console.log("[SimpleMine3DViewer] Yol çizimi tamamlandı:",e),this.savePathToServer(e).then(t=>{if(t){const i=this.pathDrawer.createPath({id:t.id,points:e,width:t.width||2.5,height:t.height||2.5,color:t.color||"#808080",type:t.type||"tunnel"});i&&this.objectSelector&&this.objectSelector.addSelectableObject(i,{id:t.id,type:"path",name:t.name,pathType:t.type,width:t.width,height:t.height,color:t.color,material:t.material,points:e.map(s=>({x:s.x,y:s.y,z:s.z})),length:this.pathDrawer.calculatePathLength(e.map(s=>({x:s.x,y:s.y,z:s.z})))}),this.deselectObject(),this.forceExitCreationMode(),console.log("[SimpleMine3DViewer] Yol kaydedildi ve düzenleme modu kapatıldı")}}).catch(t=>{console.error("[SimpleMine3DViewer] Yol kaydetme hatası:",t),this.showError("Yol kaydedilemedi: "+t.message)})}async savePathToServer(e){var t;try{const i={mine_id:this.mineId,name:`Yol ${Date.now()}`,type:"tunnel",path_points:e.map(a=>({x:a.x,y:a.y,z:a.z})),width:2.5,height:2.5,color:"#808080",status:"active"},s=await fetch(`/api/mines/${this.mineId}/paths`,{method:"POST",headers:{"Content-Type":"application/json","X-CSRF-TOKEN":((t=document.querySelector('meta[name="csrf-token"]'))==null?void 0:t.getAttribute("content"))||"",Accept:"application/json"},body:JSON.stringify(i)});if(!s.ok){const a=await s.json().catch(()=>({}));throw new Error(a.message||`HTTP ${s.status}: ${s.statusText}`)}const o=await s.json(),n=o.data||o;return console.log("[SimpleMine3DViewer] Yol başarıyla kaydedildi:",n),n}catch(i){throw console.error("[SimpleMine3DViewer] Yol kaydetme hatası:",i),i}}async updatePathToServer(e,t){var i;try{const s={...t};s.points&&!s.path_points&&(s.path_points=s.points.map(l=>({x:l.x,y:l.y,z:l.z})),delete s.points);const o=await fetch(`/api/mines/${this.mineId}/paths/${e}`,{method:"PUT",headers:{"Content-Type":"application/json","X-CSRF-TOKEN":((i=document.querySelector('meta[name="csrf-token"]'))==null?void 0:i.getAttribute("content"))||"",Accept:"application/json"},body:JSON.stringify(s)});if(!o.ok){const l=await o.json().catch(()=>({}));throw new Error(l.message||`HTTP ${o.status}: ${o.statusText}`)}const n=await o.json();console.log("[SimpleMine3DViewer] Yol güncellendi:",n.data||n),this.showSuccess("Yol güncellendi");const a=document.getElementById("save-path-btn");return a&&(a.classList.add("saved-once"),setTimeout(()=>a.classList.remove("saved-once"),400)),n.data||n}catch(s){throw console.error("[SimpleMine3DViewer] Yol güncelleme hatası:",s),this.showError("Yol güncellenemedi: "+s.message),s}}dispose(){if(console.log("[SimpleMine3DViewer] Disposing viewer"),window.removeEventListener("resize",this._resizeHandler),document.removeEventListener("keydown",this._keyHandler),this.renderer&&this.renderer.domElement){const e=this.renderer.domElement;e.removeEventListener("click",this._clickHandler),e.removeEventListener("mousemove",this._mouseMoveHandler)}this.scene&&this.scene.traverse(e=>{e.isMesh&&(e.geometry&&e.geometry.dispose(),e.material&&(Array.isArray(e.material)?e.material.forEach(t=>t.dispose()):e.material.dispose()))}),this.renderer&&this.renderer.dispose(),this.scene=null,this.camera=null,this.renderer=null}buildTunnelMeasurements(e,t){if(!this.measurementsEnabled||!e||!e.geometry)return;this._measurementGroup&&(this._measurementGroup.traverse(f=>{f.geometry&&f.geometry.dispose(),f.material&&f.material.dispose()}),this.scene.remove(this._measurementGroup));const i=new We;i.name="tunnel_measurements",this._measurementGroup=i,this.scene.add(i),this._lastMeasuredTunnel={object:e,data:t};const s=t.parameters||{};s.orientation==="yatay"&&(s.orientation="horizontal"),s.orientation==="dikey"&&(s.orientation="vertical");let o=s.width||3,n=s.height||3,a=s.length||10,l=s.orientation||"horizontal";try{e.geometry.computeBoundingBox();const f=e.geometry.boundingBox,b=new m;f.getSize(b),l==="vertical"?(a=b.y,o=b.x,n=b.z):(a=b.z,o=b.x,n=b.y)}catch{}const c=l==="vertical"?"y":"z",r=e.position.clone(),d=new U({color:43775,transparent:!0,opacity:.85,depthTest:!1,depthWrite:!1}),h=new U({color:30668,transparent:!0,opacity:.45,depthTest:!1,depthWrite:!1}),g="#00aaff",p=(f,b,v)=>{const M=new ie().setFromPoints([f,b]);return new L(M,v)},w=Math.max(1,this.measurementStep||5);{const v=(0/a-.5)*a;let M;if(c==="z"){const O=r.y+n/2+.02;M=new m(r.x+o/2+.2,O,r.z+v)}else{const O=r.z-n/2-.02;M=new m(r.x+o/2+.2,r.y+v,O)}this._addSpriteLabel("0m",M,g,i)}for(let f=w;f<a+.001;f+=w){const v=(f/a-.5)*a;let M,O;if(c==="z"){const V=r.y+n/2+.02;M=new m(r.x-o/2,V,r.z+v),O=new m(r.x+o/2,V,r.z+v)}else{const V=r.z-n/2-.02;M=new m(r.x-o/2,r.y+v,V),O=new m(r.x+o/2,r.y+v,V)}const ue=p(M,O,d);i.add(ue),this._addSpriteLabel(`${f}m`,O.clone().add(new m(.2,.2,0)),g,i)}const S=.5,D=.5,x=0;for(let f=-o/2;f<=o/2+.001;f+=S){let b,v;if(c==="z"){const M=r.z+x;b=new m(r.x+f,r.y-n/2+.01,M),v=new m(r.x+f,r.y+n/2+.01,M)}else{const M=r.z-n/2;b=new m(r.x+f,r.y+x,M+.01),v=new m(r.x+f,r.y+x,r.z+n/2+.01)}i.add(p(b,v,h))}for(let f=-n/2;f<=n/2+.001;f+=D){let b,v;if(c==="z"){const M=r.z+x;b=new m(r.x-o/2,r.y+f,M+.01),v=new m(r.x+o/2,r.y+f,M+.01)}else{const M=r.z-n/2-.01;b=new m(r.x-o/2,r.y+x,M+f),v=new m(r.x+o/2,r.y+x,M+f)}i.add(p(b,v,h))}try{const f=c==="z"?"Z Ekseni":"Y Ekseni",b=c==="z"?new m(r.x+o/2+.6,r.y+n/2+.4,r.z):new m(r.x+o/2+.6,r.y,r.z-n/2-.6);this._addSpriteLabel(f,b,"#ffaa00",i)}catch{}}replaceTunnelGeometry(e,t){if(!this.objectCreator)return;t.orientation==="yatay"&&(t.orientation="horizontal"),t.orientation==="dikey"&&(t.orientation="vertical");const i=this.objectCreator.createGeometry("tunnel",t);e.geometry&&e.geometry.dispose(),e.geometry=i,e.userData.parameters={...t},this.measurementsEnabled&&this.buildTunnelMeasurements(e,{type:"tunnel",parameters:t})}_addSpriteLabel(e,t,i,s){const o=document.createElement("canvas"),n=256;o.width=n,o.height=n;const a=o.getContext("2d");a.fillStyle="rgba(0,0,0,0.0)",a.fillRect(0,0,n,n),a.fillStyle=i||"#ffffff",a.font="48px Arial",a.textAlign="center",a.textBaseline="middle",a.fillText(e,n/2,n/2);const l=new ct(o);l.needsUpdate=!0;const c=new ht({map:l,transparent:!0}),r=new dt(c);r.scale.set(1.5,1.5,1.5),r.position.copy(t),s.add(r)}showPathDrawingUI(e){console.log("[SimpleMine3DViewer] Path drawing UI:",e?"show":"hide");const t=document.getElementById("path-controls"),i=document.getElementById("draw-path-btn"),s=document.getElementById("path-btn-text");e?(t&&(t.style.display="block"),s&&(s.textContent="Çizimi Bitir"),i&&(i.classList.remove("btn-outline-warning"),i.classList.add("btn-warning"))):(t&&(t.style.display="none"),s&&(s.textContent="Yol Çiz"),i&&(i.classList.remove("btn-warning"),i.classList.add("btn-outline-warning")));const o=document.getElementById("path-drawing-overlay");if(e&&!o){const n=document.createElement("div");n.id="path-drawing-overlay",n.innerHTML=`
                <div style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); 
                           background: rgba(0,0,0,0.8); color: white; padding: 20px; border-radius: 10px;
                           text-align: center; z-index: 1000;">
                    <h5>Yol Çizim Modu</h5>
                    <p>Yol noktalarını tıklayarak belirleyin</p>
                    <small>Enter: Tamamla | Escape: İptal</small>
                </div>
            `,this.container.appendChild(n)}else!e&&o&&o.remove()}showError(e){const t=document.getElementById("error-content");t?(t.textContent=e,new bootstrap.Modal(document.getElementById("errorModal")).show()):alert(e)}getTypeDisplayName(e){return{tunnel:"Tünel",road:"Yol",rail:"Ray",conveyor:"Konveyör"}[e]||e}editSelectedObject(){if(this.selectedObject){const e=this.selectedObject.userData.objectData;console.log("[SimpleMine3DViewer] Editing object:",e),alert("Düzenleme özelliği yakında gelecek!")}}deleteSelectedObject(){this.selectedObject&&confirm("Bu objeyi silmek istediğinizden emin misiniz?")&&this.objectSelector.deleteSelectedObject()}setCameraPreset(e){switch(e){case"overview":this.camera.position.set(25,15,35),this.controls.target.set(0,-2,0);break;case"side":this.camera.position.set(40,0,0),this.controls.target.set(0,-3,0);break;case"top":this.camera.position.set(0,30,0),this.controls.target.set(0,-3,0);break;case"underground":this.camera.position.set(10,-40,25),this.controls.target.set(0,-45,0);break;case"close":this.camera.position.set(8,2,12),this.controls.target.set(0,-1,0);break;default:this.camera.position.set(15,5,25),this.controls.target.set(0,-3,0)}this.controls.update()}animateCameraTo(e,t,i=1500){if(!this.camera||!this.controls)return;const s=this.camera.position.clone(),o=this.controls.target.clone(),n=new m().copy(e),a=new m().copy(t);let l=null;const c=r=>{l||(l=r);const d=r-l,h=Math.min(d/i,1),g=h<.5?4*h*h*h:(h-1)*(2*h-2)*(2*h-2)+1;this.camera.position.lerpVectors(s,n,g),this.controls.target.lerpVectors(o,a,g),this.controls.update(),h<1&&requestAnimationFrame(c)};requestAnimationFrame(c)}}window.SimpleMine3DViewer=Ot;
